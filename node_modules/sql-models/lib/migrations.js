'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.writeMigration = exports.getCurrentVersion = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var getCurrentVersion = exports.getCurrentVersion = function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
        var migrationFileNames;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.next = 2;
                        return getMigrationFileNames();

                    case 2:
                        migrationFileNames = _context.sent;
                        return _context.abrupt('return', migrationFileNames.map(function (fileName) {
                            var baseName = _path2.default.basename(fileName);
                            var matches = baseName.match(/^([0-9]+).*\.js$/);

                            if (matches && matches.length > 1) {
                                return parseInt(matches[1]);
                            } else {
                                return 0;
                            }
                        }).reduce(function (current, value) {
                            if (value > current) {
                                return value;
                            } else {
                                return current;
                            }
                        }, 0));

                    case 4:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this);
    }));

    return function getCurrentVersion() {
        return _ref.apply(this, arguments);
    };
}();

var writeMigration = exports.writeMigration = function () {
    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(version, contents) {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        return _context3.abrupt('return', new _promise2.default(function () {
                            var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(resolve, reject) {
                                var migrationsPath, versionString, fileName;
                                return _regenerator2.default.wrap(function _callee2$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                migrationsPath = _path2.default.join(process.cwd(), 'migrations');
                                                _context2.next = 3;
                                                return createDirectory(migrationsPath);

                                            case 3:
                                                versionString = zeroPad(version, 100);
                                                fileName = versionString + '.js';

                                                _fs2.default.writeFile(_path2.default.join(migrationsPath, fileName), contents, function (error) {
                                                    if (error) {
                                                        reject(error);
                                                    } else {
                                                        resolve(fileName);
                                                    }
                                                });

                                            case 6:
                                            case 'end':
                                                return _context2.stop();
                                        }
                                    }
                                }, _callee2, this);
                            }));

                            return function (_x3, _x4) {
                                return _ref3.apply(this, arguments);
                            };
                        }()));

                    case 1:
                    case 'end':
                        return _context3.stop();
                }
            }
        }, _callee3, this);
    }));

    return function writeMigration(_x, _x2) {
        return _ref2.apply(this, arguments);
    };
}();

exports.zeroPad = zeroPad;
exports.getMigrationFileNames = getMigrationFileNames;
exports.createMigrationContents = createMigrationContents;
exports.createDirectory = createDirectory;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function zeroPad(number, base) {
    var length = String(base).length - String(number).length + 1;
    return new Array(length).join('0') + number;
}

function getMigrationFileNames() {
    return new _promise2.default(function (resolve, reject) {
        _fs2.default.readdir(_path2.default.join(process.cwd(), 'migrations'), function (error, fileNames) {
            if (error) {
                if (error.errno === -2) {
                    // The directory does not exist.
                    resolve([]);
                } else {
                    reject(error);
                }
            } else {
                var migrationsPath = _path2.default.join(process.cwd(), 'migrations');

                resolve(fileNames.map(function (fileName) {
                    return _path2.default.join(migrationsPath, fileName);
                }));
            }
        });
    });
}

function createMigrationContents(upQueries, downQueries) {
    // TODO: We should add tabs accordingly.

    var tab = '\t';
    return 'export function up(transaction) {\n    ' + upQueries.map(function (query) {
        return 'transaction.sql `' + query.split('\n').join('\n' + tab) + '`;';
    }).join('\n\n') + '\n}\n\nexport function down(transaction) {\n    ' + downQueries.map(function (query) {
        return 'transaction.sql `' + query.split('\n').join('\n' + tab) + '`;';
    }).join('\n\n') + '\n}\n';
}

function createDirectory(directoryPath) {
    return new _promise2.default(function (resolve, reject) {
        _fs2.default.mkdir(directoryPath, function (error) {
            if (error && error.code !== 'EEXIST') {
                reject(error);
            } else {
                resolve();
            }
        });
    });
}