'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createMigrations = exports.runMigrations = exports.Table = exports.Schema = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var runMigrations = exports.runMigrations = function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
        var _this = this;

        var databaseVersion, currentVersion, migrationsBuildPath;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _context2.next = 2;
                        return (0, _release.getDatabaseVersion)();

                    case 2:
                        databaseVersion = _context2.sent;
                        _context2.next = 5;
                        return (0, _migrations.getCurrentVersion)();

                    case 5:
                        currentVersion = _context2.sent;

                        if (!(databaseVersion > currentVersion)) {
                            _context2.next = 9;
                            break;
                        }

                        _context2.next = 20;
                        break;

                    case 9:
                        if (!(databaseVersion < currentVersion)) {
                            _context2.next = 20;
                            break;
                        }

                        _context2.next = 12;
                        return (0, _release.createMigrationsTable)();

                    case 12:

                        console.log('Migrate from ' + databaseVersion + ' to ' + currentVersion);

                        migrationsBuildPath = _path2.default.join(process.cwd(), '.build', 'migrations');
                        _context2.next = 16;
                        return _legoSql2.default.transaction(function () {
                            var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(trans) {
                                var version, migration;
                                return _regenerator2.default.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                version = databaseVersion + 1;

                                            case 1:
                                                if (!(version <= currentVersion)) {
                                                    _context.next = 8;
                                                    break;
                                                }

                                                migration = require(_path2.default.join(migrationsBuildPath, (0, _migrations.zeroPad)(version, 100) + '.js'));
                                                _context.next = 5;
                                                return migration.up(trans);

                                            case 5:
                                                version++;
                                                _context.next = 1;
                                                break;

                                            case 8:
                                            case 'end':
                                                return _context.stop();
                                        }
                                    }
                                }, _callee, _this);
                            }));

                            return function (_x) {
                                return _ref2.apply(this, arguments);
                            };
                        }());

                    case 16:
                        _context2.next = 18;
                        return (0, _release.insertMigration)(currentVersion);

                    case 18:
                        _context2.next = 20;
                        break;

                    case 20:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, this);
    }));

    return function runMigrations() {
        return _ref.apply(this, arguments);
    };
}();

var createMigrations = exports.createMigrations = function () {
    var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
        var filePaths, migrationsBuildPath, fromSimulator, toSimulator, tableNames, fromSimulatorDown, toSimulatorDown, upQueries, downQueries, currentVersion, contents, transform;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        _context3.next = 2;
                        return (0, _migrations.getMigrationFileNames)();

                    case 2:
                        filePaths = _context3.sent;
                        migrationsBuildPath = _path2.default.join(process.cwd(), '.build', 'migrations');
                        _context3.next = 6;
                        return (0, _migrations.createDirectory)(migrationsBuildPath);

                    case 6:

                        filePaths.forEach(function (filePath) {
                            var transform = babel.transformFileSync(filePath, {
                                presets: [_babelPresetEnv2.default]
                            });

                            _fs2.default.writeFileSync(_path2.default.join(migrationsBuildPath, _path2.default.basename(filePath)), transform.code);
                        });

                        fromSimulator = new _sqlSimulator2.default();
                        toSimulator = new _sqlSimulator2.default();

                        // Load the migrations from process.cwd().

                        filePaths.forEach(function (filePath) {
                            var migration = require(_path2.default.join(migrationsBuildPath, _path2.default.basename(filePath)));

                            var transaction = {
                                sql: function sql(strings) {
                                    fromSimulator.simulateQuery(strings[0]);
                                }
                            };
                            migration.up(transaction);
                        });

                        // Load the models.
                        _context3.prev = 10;

                        require(_path2.default.join(process.cwd(), '.build', 'server.js'));
                        _context3.next = 20;
                        break;

                    case 14:
                        _context3.prev = 14;
                        _context3.t0 = _context3['catch'](10);

                        console.log('something is wrong in user land');
                        console.log(_context3.t0);
                        console.log(_context3.t0.stack);

                        throw _context3.t0;

                    case 20:

                        _schema2.default.autoLoadTables();

                        tableNames = _schema2.default.loadTables(toSimulator);

                        _schema2.default.writeAstSync(toSimulator, tableNames);

                        fromSimulatorDown = new _sqlSimulator2.default(fromSimulator);
                        toSimulatorDown = new _sqlSimulator2.default(toSimulator);
                        upQueries = (0, _sqlCreator2.default)(fromSimulator, toSimulator);

                        if (!(upQueries.length > 0)) {
                            _context3.next = 36;
                            break;
                        }

                        downQueries = (0, _sqlCreator2.default)(toSimulatorDown, fromSimulatorDown);
                        _context3.next = 30;
                        return (0, _migrations.getCurrentVersion)();

                    case 30:
                        currentVersion = _context3.sent;
                        contents = (0, _migrations.createMigrationContents)(upQueries, downQueries);
                        _context3.next = 34;
                        return (0, _migrations.writeMigration)(currentVersion + 1, contents);

                    case 34:
                        transform = babel.transform(contents, {
                            presets: [_babelPresetEnv2.default]
                        });

                        _fs2.default.writeFileSync(_path2.default.join(migrationsBuildPath, (0, _migrations.zeroPad)(currentVersion + 1, 100) + '.js'), transform.code);

                    case 36:
                    case 'end':
                        return _context3.stop();
                }
            }
        }, _callee3, this, [[10, 14]]);
    }));

    return function createMigrations() {
        return _ref3.apply(this, arguments);
    };
}();

exports.default = registerTable;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _babelCore = require('babel-core');

var babel = _interopRequireWildcard(_babelCore);

var _babelPresetEnv = require('babel-preset-env');

var _babelPresetEnv2 = _interopRequireDefault(_babelPresetEnv);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _sqlSimulator = require('sql-simulator');

var _sqlSimulator2 = _interopRequireDefault(_sqlSimulator);

var _sqlCreator = require('sql-creator');

var _sqlCreator2 = _interopRequireDefault(_sqlCreator);

var _legoSql = require('lego-sql');

var _legoSql2 = _interopRequireDefault(_legoSql);

var _schema = require('./schema.js');

var _schema2 = _interopRequireDefault(_schema);

var _table = require('./table.js');

var _table2 = _interopRequireDefault(_table);

var _migrations = require('./migrations.js');

var _release = require('./release.js');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.Schema = _schema2.default;
exports.Table = _table2.default; /* eslint-disable import/no-dynamic-require */

var tableClasses = [];

function registerTable(Table) {
    tableClasses.push(Table);
}