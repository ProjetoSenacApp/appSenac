'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _table = require('./table.js');

var _table2 = _interopRequireDefault(_table);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AST_FILE_PATH = _path2.default.join(process.cwd(), '.build', 'ast.js');
var DEFAULT_TABLES_PATH = _path2.default.join(process.cwd(), '.build', 'lib', 'tables');

var tableClasses = [];

var Schema = function () {
    (0, _createClass3.default)(Schema, null, [{
        key: 'loadTables',

        // Load the ast, load all the tables.
        value: function loadTables(simulator) {
            var allTableNames = {};

            tableClasses.forEach(function (Table) {
                var transaction = {
                    sql: function sql(strings) {
                        simulator.simulateQuery(strings[0]);
                    }
                };

                var tableNames = new _set2.default((0, _keys2.default)(simulator.tables));

                Table.create(transaction);

                var newTableNames = (0, _keys2.default)(simulator.tables).filter(function (tableName) {
                    return !tableNames.has(tableName);
                });

                (0, _assert2.default)(newTableNames.length === 1, 'Multiple tables found in ' + Table.name + '. Only one is allowed.');

                var tableName = newTableNames[0];

                (0, _assert2.default)(!tableNames[Table.name], 'Table ' + Table.name + ' with database table ' + tableName + ' already exists. Did you forget to rename the table model?');

                var name = Table.name[0].toUpperCase() + Table.name.substring(1);
                allTableNames[name] = tableName;
            });

            return allTableNames;
        }
    }, {
        key: 'writeAstSync',
        value: function writeAstSync(simulator, tableNames) {
            var object = (0, _extends3.default)({}, simulator.toJSON(), {
                tableNames: tableNames
            });

            _fs2.default.writeFileSync(AST_FILE_PATH, 'module.exports = ' + (0, _stringify2.default)(object));
        }
    }, {
        key: 'autoLoadTables',
        value: function autoLoadTables() {
            // For now, only load the tables if no table classes are set manually.
            var shouldAutoLoadTables = tableClasses.length === 0;

            if (shouldAutoLoadTables) {
                var filePaths = _fs2.default.readdirSync(DEFAULT_TABLES_PATH);

                filePaths.forEach(function (filePath) {
                    if (_path2.default.extname(filePath) === '.js') {
                        /* eslint-disable import/no-dynamic-require */
                        var file = require(_path2.default.join(DEFAULT_TABLES_PATH, filePath));
                        /* eslint-enable import/no-dynamic-require */

                        // TODO: Check if this is a Table class.
                        (0, _assert2.default)(file.default, 'You should export a default table in ' + filePath + '.');

                        tableClasses.push(file.default);
                    }
                });
            }
        }
    }, {
        key: 'addTableClasses',
        value: function addTableClasses(manualTableClasses) {
            tableClasses.push.apply(tableClasses, (0, _toConsumableArray3.default)(manualTableClasses));
        }

        /* eslint-disable import/no-dynamic-require */

    }]);

    function Schema() {
        var _this = this;

        var ast = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : require(AST_FILE_PATH);
        (0, _classCallCheck3.default)(this, Schema);

        tableClasses.forEach(function (Table) {
            var name = Table.name;
            var tableName = ast.tableNames[name];

            _this[tableName] = new Table(ast, tableName);
        });
    }
    /* eslint-enable import/no-dynamic-require */

    (0, _createClass3.default)(Schema, [{
        key: 'transaction',
        value: function transaction(callback) {
            // TODO: Fork this schema & make execute through a transaction.
        }
    }]);
    return Schema;
}();

exports.default = Schema;