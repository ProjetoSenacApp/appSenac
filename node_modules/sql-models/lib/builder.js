'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _taggedTemplateLiteral2 = require('babel-runtime/helpers/taggedTemplateLiteral');

var _taggedTemplateLiteral3 = _interopRequireDefault(_taggedTemplateLiteral2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _templateObject = (0, _taggedTemplateLiteral3.default)(['', ''], ['', '']),
    _templateObject2 = (0, _taggedTemplateLiteral3.default)([', '], [', ']),
    _templateObject3 = (0, _taggedTemplateLiteral3.default)(['(', '.', ' = ', '.', ')'], ['(', '.', ' = ', '.', ')']);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _legoSql = require('lego-sql');

var _legoSql2 = _interopRequireDefault(_legoSql);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Builder = function () {
    function Builder(table) {
        (0, _classCallCheck3.default)(this, Builder);

        this.ast = table.ast;
        this.tableName = table.name;

        this.internal = _legoSql2.default.sql([]);
    }

    (0, _createClass3.default)(Builder, [{
        key: 'then',
        value: function then(callback, errback) {
            return this.internal.exec().then(callback, errback);
        }
    }, {
        key: 'catch',
        value: function _catch(errback) {
            return this.internal.exec().catch(errback);
        }
    }, {
        key: 'control',
        value: function control(sql) {
            if (this.registree.sql === sql) {
                this.registree = null;
            } else {
                this.registree.callback();
            }
        }
    }, {
        key: '_add',
        value: function _add(sql, strings, parameters) {
            if (this.registree) {
                this.control(sql);
            }

            this.internal.append([sql]);

            if (strings) {
                var _internal;

                (_internal = this.internal).append.apply(_internal, [strings].concat((0, _toConsumableArray3.default)(parameters)));
            }

            return this;
        }
    }, {
        key: 'sql',
        value: function sql(strings) {
            var _internal2;

            for (var _len = arguments.length, parameters = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                parameters[_key - 1] = arguments[_key];
            }

            (_internal2 = this.internal).append.apply(_internal2, [strings].concat(parameters));
            return this;
        }
    }, {
        key: 'register',
        value: function register(sql, callback) {
            this.registree = {
                sql: sql,
                callback: callback
            };
        }
    }, {
        key: 'select',
        value: function select(strings) {
            var _this = this;

            for (var _len2 = arguments.length, parameters = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                parameters[_key2 - 1] = arguments[_key2];
            }

            this._add('SELECT', strings, parameters);
            this.register('FROM', function () {
                _this.from(_templateObject, _legoSql2.default.raw(_this.tableName));
            });
            return this;
        }
    }, {
        key: 'from',
        value: function from(strings) {
            for (var _len3 = arguments.length, parameters = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                parameters[_key3 - 1] = arguments[_key3];
            }

            return this._add('FROM', strings, parameters);
        }
    }, {
        key: 'insert',
        value: function insert(values) {
            var _this2 = this;

            this._add('INSERT INTO ' + this.tableName);

            var columnNames = values && (0, _keys2.default)(values);

            if (columnNames && columnNames.length > 0) {
                this._add('(' + columnNames.join(', ') + ') VALUES (');

                columnNames.forEach(function (columnName, index) {
                    if (index > 0) {
                        _this2.sql(_templateObject2);
                    }

                    _this2.sql(_templateObject, values[columnName]);
                });

                this._add(')');
            } else {
                this._add('DEFAULT VALUES');
            }

            return this;
        }
    }, {
        key: 'returning',
        value: function returning(strings) {
            for (var _len4 = arguments.length, parameters = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                parameters[_key4 - 1] = arguments[_key4];
            }

            return this._add('RETURNING', strings, parameters);
        }
    }, {
        key: 'innerJoin',
        value: function innerJoin(strings) {
            var _this3 = this;

            for (var _len5 = arguments.length, parameters = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
                parameters[_key5 - 1] = arguments[_key5];
            }

            this._add('INNER JOIN', strings, parameters);
            this.register('ON', function () {
                var referenceTableName = strings[0];
                var referenceTable = _this3.ast.tables[referenceTableName];
                var table = _this3.ast.tables[_this3.tableName];

                (0, _assert2.default)(referenceTable, 'Could not find reference table "' + referenceTableName + '" in schema-aware ON.');
                (0, _assert2.default)(table, 'Could not find table ' + _this3.tableName + ' in schema-aware ON.');

                var primaryKey = table.indexes[0];
                var foreignKey = referenceTable.indexes.find(function (foreignKey) {
                    return foreignKey.type === 'foreignKey' && foreignKey.tableName === table.name;
                });

                (0, _assert2.default)(primaryKey.type === 'primaryKey');

                // TODO: What if there are multiple columns? We're not covering that case yet.

                _this3.on(_templateObject3, _legoSql2.default.raw(table.name), _legoSql2.default.raw(primaryKey.columns[0]), _legoSql2.default.raw(referenceTable.name), _legoSql2.default.raw(foreignKey.columns[0]));
            });
            return this;
        }
    }, {
        key: 'on',
        value: function on(strings) {
            for (var _len6 = arguments.length, parameters = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
                parameters[_key6 - 1] = arguments[_key6];
            }

            return this._add('ON', strings, parameters);
        }
    }, {
        key: 'where',
        value: function where(strings) {
            for (var _len7 = arguments.length, parameters = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
                parameters[_key7 - 1] = arguments[_key7];
            }

            return this._add('WHERE', strings, parameters);
        }
    }, {
        key: 'limit',
        value: function limit(strings) {
            for (var _len8 = arguments.length, parameters = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
                parameters[_key8 - 1] = arguments[_key8];
            }

            return this._add('LIMIT', strings, parameters);
        }
    }, {
        key: 'with',
        value: function _with(strings) {
            for (var _len9 = arguments.length, parameters = Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {
                parameters[_key9 - 1] = arguments[_key9];
            }

            return this._add('WITH', strings, parameters);
        }
    }, {
        key: 'withRecursive',
        value: function withRecursive(strings) {
            for (var _len10 = arguments.length, parameters = Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {
                parameters[_key10 - 1] = arguments[_key10];
            }

            return this._add('WITH RECURSIVE', strings, parameters);
        }
    }, {
        key: 'leftJoin',
        value: function leftJoin(strings) {
            for (var _len11 = arguments.length, parameters = Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {
                parameters[_key11 - 1] = arguments[_key11];
            }

            return this._add('LEFT JOIN', strings, parameters);
        }
    }, {
        key: 'leftOuterJoin',
        value: function leftOuterJoin(strings) {
            for (var _len12 = arguments.length, parameters = Array(_len12 > 1 ? _len12 - 1 : 0), _key12 = 1; _key12 < _len12; _key12++) {
                parameters[_key12 - 1] = arguments[_key12];
            }

            return this._add('LEFT OUTER JOIN', strings, parameters);
        }
    }, {
        key: 'rightJoin',
        value: function rightJoin(strings) {
            for (var _len13 = arguments.length, parameters = Array(_len13 > 1 ? _len13 - 1 : 0), _key13 = 1; _key13 < _len13; _key13++) {
                parameters[_key13 - 1] = arguments[_key13];
            }

            return this._add('RIGHT JOIN', strings, parameters);
        }
    }, {
        key: 'rightOuterJoin',
        value: function rightOuterJoin(strings) {
            for (var _len14 = arguments.length, parameters = Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++) {
                parameters[_key14 - 1] = arguments[_key14];
            }

            return this._add('RIGHT OUTER JOIN', strings, parameters);
        }
    }, {
        key: 'outerJoin',
        value: function outerJoin(strings) {
            for (var _len15 = arguments.length, parameters = Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {
                parameters[_key15 - 1] = arguments[_key15];
            }

            return this._add('OUTER JOIN', strings, parameters);
        }
    }, {
        key: 'fullOuterJoin',
        value: function fullOuterJoin(strings) {
            for (var _len16 = arguments.length, parameters = Array(_len16 > 1 ? _len16 - 1 : 0), _key16 = 1; _key16 < _len16; _key16++) {
                parameters[_key16 - 1] = arguments[_key16];
            }

            return this._add('FULL OUTER JOIN', strings, parameters);
        }
    }, {
        key: 'crossJoin',
        value: function crossJoin(strings) {
            for (var _len17 = arguments.length, parameters = Array(_len17 > 1 ? _len17 - 1 : 0), _key17 = 1; _key17 < _len17; _key17++) {
                parameters[_key17 - 1] = arguments[_key17];
            }

            return this._add('CROSS JOIN', strings, parameters);
        }
    }, {
        key: 'offset',
        value: function offset(strings) {
            for (var _len18 = arguments.length, parameters = Array(_len18 > 1 ? _len18 - 1 : 0), _key18 = 1; _key18 < _len18; _key18++) {
                parameters[_key18 - 1] = arguments[_key18];
            }

            return this._add('OFFSET', strings, parameters);
        }
    }, {
        key: 'groupBy',
        value: function groupBy(strings) {
            for (var _len19 = arguments.length, parameters = Array(_len19 > 1 ? _len19 - 1 : 0), _key19 = 1; _key19 < _len19; _key19++) {
                parameters[_key19 - 1] = arguments[_key19];
            }

            return this._add('GROUP BY', strings, parameters);
        }
    }, {
        key: 'orderBy',
        value: function orderBy(strings) {
            for (var _len20 = arguments.length, parameters = Array(_len20 > 1 ? _len20 - 1 : 0), _key20 = 1; _key20 < _len20; _key20++) {
                parameters[_key20 - 1] = arguments[_key20];
            }

            return this._add('ORDER BY', strings, parameters);
        }
    }, {
        key: 'having',
        value: function having(strings) {
            for (var _len21 = arguments.length, parameters = Array(_len21 > 1 ? _len21 - 1 : 0), _key21 = 1; _key21 < _len21; _key21++) {
                parameters[_key21 - 1] = arguments[_key21];
            }

            return this._add('HAVING', strings, parameters);
        }
    }, {
        key: 'update',
        value: function update(strings) {
            for (var _len22 = arguments.length, parameters = Array(_len22 > 1 ? _len22 - 1 : 0), _key22 = 1; _key22 < _len22; _key22++) {
                parameters[_key22 - 1] = arguments[_key22];
            }

            return this._add('UPDATE', strings, parameters);
        }
    }, {
        key: 'delete',
        value: function _delete(strings) {
            for (var _len23 = arguments.length, parameters = Array(_len23 > 1 ? _len23 - 1 : 0), _key23 = 1; _key23 < _len23; _key23++) {
                parameters[_key23 - 1] = arguments[_key23];
            }

            return this._add('DELETE', strings, parameters);
        }
    }, {
        key: 'toQuery',
        value: function toQuery() {
            if (this.registree) {
                this.control();
            }

            var _internal$toQuery = this.internal.toQuery(),
                text = _internal$toQuery.text,
                parameters = _internal$toQuery.parameters;

            return {
                text: text,
                parameters: parameters
            };
        }
    }]);
    return Builder;
}();

exports.default = Builder;