'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _taggedTemplateLiteral2 = require('babel-runtime/helpers/taggedTemplateLiteral');

var _taggedTemplateLiteral3 = _interopRequireDefault(_taggedTemplateLiteral2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _templateObject = (0, _taggedTemplateLiteral3.default)(['CREATE TABLE foo (\n                id INTEGER PRIMARY KEY,\n                value INTEGER NOT NULL\n            )'], ['CREATE TABLE foo (\n                id INTEGER PRIMARY KEY,\n                value INTEGER NOT NULL\n            )']),
    _templateObject2 = (0, _taggedTemplateLiteral3.default)(['CREATE TABLE bar (\n                id INTEGER PRIMARY KEY,\n                foo_id INTEGER REFERENCES foo (id)\n            )'], ['CREATE TABLE bar (\n                id INTEGER PRIMARY KEY,\n                foo_id INTEGER REFERENCES foo (id)\n            )']),
    _templateObject3 = (0, _taggedTemplateLiteral3.default)(['value > 10'], ['value > 10']),
    _templateObject4 = (0, _taggedTemplateLiteral3.default)(['*'], ['*']),
    _templateObject5 = (0, _taggedTemplateLiteral3.default)(['test'], ['test']),
    _templateObject6 = (0, _taggedTemplateLiteral3.default)(['bar'], ['bar']);

var _sqlSimulator = require('sql-simulator');

var _sqlSimulator2 = _interopRequireDefault(_sqlSimulator);

var _table = require('../table.js');

var _table2 = _interopRequireDefault(_table);

var _schema = require('../schema.js');

var _schema2 = _interopRequireDefault(_schema);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('tables', function () {
    var Foo = function (_Table) {
        (0, _inherits3.default)(Foo, _Table);

        function Foo() {
            (0, _classCallCheck3.default)(this, Foo);
            return (0, _possibleConstructorReturn3.default)(this, (Foo.__proto__ || (0, _getPrototypeOf2.default)(Foo)).apply(this, arguments));
        }

        (0, _createClass3.default)(Foo, null, [{
            key: 'create',
            value: function create(transaction) {
                transaction.sql(_templateObject);
            }
        }]);
        return Foo;
    }(_table2.default);

    var Bar = function (_Table2) {
        (0, _inherits3.default)(Bar, _Table2);

        function Bar() {
            (0, _classCallCheck3.default)(this, Bar);
            return (0, _possibleConstructorReturn3.default)(this, (Bar.__proto__ || (0, _getPrototypeOf2.default)(Bar)).apply(this, arguments));
        }

        (0, _createClass3.default)(Bar, null, [{
            key: 'create',
            value: function create(transaction) {
                transaction.sql(_templateObject2);
            }
        }]);
        return Bar;
    }(_table2.default);

    _schema2.default.addTableClasses([Foo, Bar]);
    var simulator = new _sqlSimulator2.default();
    var tableNames = _schema2.default.loadTables(simulator);

    var ast = (0, _extends3.default)({}, simulator.toJSON(), {
        tableNames: tableNames
    });
    var schema = new _schema2.default(ast);

    it('select with schema-aware from', function () {
        var query = schema.foo.select(_templateObject4).where(_templateObject3).toQuery();

        expect(query.text).toEqual('SELECT * FROM foo WHERE value > 10');
    });

    it('select with manual from', function () {
        var query = schema.foo.select(_templateObject4).from(_templateObject5).where(_templateObject3).toQuery();

        expect(query.text).toEqual('SELECT * FROM test WHERE value > 10');
    });

    it('select with schema-aware inner join', function () {
        var query = schema.foo.select(_templateObject4).innerJoin(_templateObject6).where(_templateObject3).toQuery();

        expect(query.text).toEqual('SELECT * FROM foo INNER JOIN bar ON (foo.id = bar.foo_id) WHERE value > 10');
    });

    it('insert with a value', function () {
        var value = 123;
        var query = schema.foo.insert({
            value: value
        }).toQuery();

        expect(query).toEqual({
            text: 'INSERT INTO foo (value) VALUES ($1)',
            parameters: [value]
        });
    });

    it('insert without values', function () {
        var query = schema.foo.insert().toQuery();

        expect(query).toEqual({
            text: 'INSERT INTO foo DEFAULT VALUES',
            parameters: []
        });
    });
});