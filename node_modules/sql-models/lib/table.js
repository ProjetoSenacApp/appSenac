'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _builder = require('./builder.js');

var _builder2 = _interopRequireDefault(_builder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Table = function () {
    (0, _createClass3.default)(Table, null, [{
        key: 'create',
        value: function create(_transaction) {}
    }]);

    function Table(ast, name) {
        (0, _classCallCheck3.default)(this, Table);

        this.ast = ast;
        this.name = name;
    }

    (0, _createClass3.default)(Table, [{
        key: 'select',
        value: function select(strings) {
            var builder = new _builder2.default(this);

            for (var _len = arguments.length, parameters = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                parameters[_key - 1] = arguments[_key];
            }

            return builder.select.apply(builder, [strings].concat(parameters));
        }
    }, {
        key: 'with',
        value: function _with(strings) {
            var builder = new _builder2.default(this);

            for (var _len2 = arguments.length, parameters = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                parameters[_key2 - 1] = arguments[_key2];
            }

            return builder.with.apply(builder, [strings].concat(parameters));
        }
    }, {
        key: 'update',
        value: function update(strings) {
            var builder = new _builder2.default(this);

            for (var _len3 = arguments.length, parameters = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                parameters[_key3 - 1] = arguments[_key3];
            }

            return builder.update.apply(builder, [strings].concat(parameters));
        }
    }, {
        key: 'delete',
        value: function _delete(strings) {
            var builder = new _builder2.default(this);

            for (var _len4 = arguments.length, parameters = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                parameters[_key4 - 1] = arguments[_key4];
            }

            return builder.delete.apply(builder, [strings].concat(parameters));
        }
    }, {
        key: 'insert',
        value: function insert(strings) {
            var builder = new _builder2.default(this);

            for (var _len5 = arguments.length, parameters = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
                parameters[_key5 - 1] = arguments[_key5];
            }

            return builder.insert.apply(builder, [strings].concat(parameters));
        }
    }, {
        key: 'sql',
        value: function sql(strings) {
            var builder = new _builder2.default(this);

            for (var _len6 = arguments.length, parameters = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
                parameters[_key6 - 1] = arguments[_key6];
            }

            return builder.sql.apply(builder, [strings].concat(parameters));
        }
    }]);
    return Table;
}();

exports.default = Table;