/**
 * @fileoverview added by tsickle
 * Generated from: list/create-reference.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { snapshotChanges } from './snapshot-changes';
import { stateChanges } from './state-changes';
import { auditTrail } from './audit-trail';
import { createDataOperationMethod } from './data-operation';
import { createRemoveMethod } from './remove';
import { map } from 'rxjs/operators';
/**
 * @template T
 * @param {?} query
 * @param {?} afDatabase
 * @return {?}
 */
export function createListReference(query, afDatabase) {
    /** @type {?} */
    const outsideAngularScheduler = afDatabase.schedulers.outsideAngular;
    /** @type {?} */
    const refInZone = afDatabase.schedulers.ngZone.run((/**
     * @return {?}
     */
    () => query.ref));
    return {
        query,
        update: createDataOperationMethod(refInZone, 'update'),
        set: createDataOperationMethod(refInZone, 'set'),
        push: (/**
         * @param {?} data
         * @return {?}
         */
        (data) => refInZone.push(data)),
        remove: createRemoveMethod(refInZone),
        /**
         * @param {?=} events
         * @return {?}
         */
        snapshotChanges(events) {
            return snapshotChanges(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);
        },
        /**
         * @param {?=} events
         * @return {?}
         */
        stateChanges(events) {
            return stateChanges(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);
        },
        /**
         * @param {?=} events
         * @return {?}
         */
        auditTrail(events) {
            return auditTrail(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);
        },
        /**
         * @param {?=} events
         * @return {?}
         */
        valueChanges(events) {
            /** @type {?} */
            const snapshotChanges$ = snapshotChanges(query, events, outsideAngularScheduler);
            return snapshotChanges$.pipe(map((/**
             * @param {?} actions
             * @return {?}
             */
            actions => actions.map((/**
             * @param {?} a
             * @return {?}
             */
            a => (/** @type {?} */ (a.payload.val())))))), afDatabase.keepUnstableUntilFirst);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXJlZmVyZW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9kYXRhYmFzZS9saXN0L2NyZWF0ZS1yZWZlcmVuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTlDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7OztBQUVyQyxNQUFNLFVBQVUsbUJBQW1CLENBQVMsS0FBb0IsRUFBRSxVQUErQjs7VUFDekYsdUJBQXVCLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxjQUFjOztVQUM5RCxTQUFTLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRzs7O0lBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBQztJQUNuRSxPQUFPO1FBQ0wsS0FBSztRQUNMLE1BQU0sRUFBRSx5QkFBeUIsQ0FBYSxTQUFTLEVBQUUsUUFBUSxDQUFDO1FBQ2xFLEdBQUcsRUFBRSx5QkFBeUIsQ0FBSSxTQUFTLEVBQUUsS0FBSyxDQUFDO1FBQ25ELElBQUk7Ozs7UUFBRSxDQUFDLElBQU8sRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN2QyxNQUFNLEVBQUUsa0JBQWtCLENBQUMsU0FBUyxDQUFDOzs7OztRQUNyQyxlQUFlLENBQUMsTUFBcUI7WUFDbkMsT0FBTyxlQUFlLENBQUksS0FBSyxFQUFFLE1BQU0sRUFBRSx1QkFBdUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUM1RyxDQUFDOzs7OztRQUNELFlBQVksQ0FBQyxNQUFxQjtZQUNoQyxPQUFPLFlBQVksQ0FBSSxLQUFLLEVBQUUsTUFBTSxFQUFFLHVCQUF1QixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3pHLENBQUM7Ozs7O1FBQ0QsVUFBVSxDQUFDLE1BQXFCO1lBQzlCLE9BQU8sVUFBVSxDQUFJLEtBQUssRUFBRSxNQUFNLEVBQUUsdUJBQXVCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDdkcsQ0FBQzs7Ozs7UUFDRCxZQUFZLENBQUMsTUFBcUI7O2tCQUMxQixnQkFBZ0IsR0FBRyxlQUFlLENBQUksS0FBSyxFQUFFLE1BQU0sRUFBRSx1QkFBdUIsQ0FBQztZQUNuRixPQUFPLGdCQUFnQixDQUFDLElBQUksQ0FDMUIsR0FBRzs7OztZQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUc7Ozs7WUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLG1CQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUssRUFBQyxFQUFDLEVBQ3RELFVBQVUsQ0FBQyxzQkFBc0IsQ0FDbEMsQ0FBQztRQUNKLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFuZ3VsYXJGaXJlTGlzdCwgQ2hpbGRFdmVudCwgRGF0YWJhc2VRdWVyeSB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgc25hcHNob3RDaGFuZ2VzIH0gZnJvbSAnLi9zbmFwc2hvdC1jaGFuZ2VzJztcbmltcG9ydCB7IHN0YXRlQ2hhbmdlcyB9IGZyb20gJy4vc3RhdGUtY2hhbmdlcyc7XG5pbXBvcnQgeyBhdWRpdFRyYWlsIH0gZnJvbSAnLi9hdWRpdC10cmFpbCc7XG5pbXBvcnQgeyBjcmVhdGVEYXRhT3BlcmF0aW9uTWV0aG9kIH0gZnJvbSAnLi9kYXRhLW9wZXJhdGlvbic7XG5pbXBvcnQgeyBjcmVhdGVSZW1vdmVNZXRob2QgfSBmcm9tICcuL3JlbW92ZSc7XG5pbXBvcnQgeyBBbmd1bGFyRmlyZURhdGFiYXNlIH0gZnJvbSAnLi4vZGF0YWJhc2UnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTGlzdFJlZmVyZW5jZTxUPSBhbnk+KHF1ZXJ5OiBEYXRhYmFzZVF1ZXJ5LCBhZkRhdGFiYXNlOiBBbmd1bGFyRmlyZURhdGFiYXNlKTogQW5ndWxhckZpcmVMaXN0PFQ+IHtcbiAgY29uc3Qgb3V0c2lkZUFuZ3VsYXJTY2hlZHVsZXIgPSBhZkRhdGFiYXNlLnNjaGVkdWxlcnMub3V0c2lkZUFuZ3VsYXI7XG4gIGNvbnN0IHJlZkluWm9uZSA9IGFmRGF0YWJhc2Uuc2NoZWR1bGVycy5uZ1pvbmUucnVuKCgpID0+IHF1ZXJ5LnJlZik7XG4gIHJldHVybiB7XG4gICAgcXVlcnksXG4gICAgdXBkYXRlOiBjcmVhdGVEYXRhT3BlcmF0aW9uTWV0aG9kPFBhcnRpYWw8VD4+KHJlZkluWm9uZSwgJ3VwZGF0ZScpLFxuICAgIHNldDogY3JlYXRlRGF0YU9wZXJhdGlvbk1ldGhvZDxUPihyZWZJblpvbmUsICdzZXQnKSxcbiAgICBwdXNoOiAoZGF0YTogVCkgPT4gcmVmSW5ab25lLnB1c2goZGF0YSksXG4gICAgcmVtb3ZlOiBjcmVhdGVSZW1vdmVNZXRob2QocmVmSW5ab25lKSxcbiAgICBzbmFwc2hvdENoYW5nZXMoZXZlbnRzPzogQ2hpbGRFdmVudFtdKSB7XG4gICAgICByZXR1cm4gc25hcHNob3RDaGFuZ2VzPFQ+KHF1ZXJ5LCBldmVudHMsIG91dHNpZGVBbmd1bGFyU2NoZWR1bGVyKS5waXBlKGFmRGF0YWJhc2Uua2VlcFVuc3RhYmxlVW50aWxGaXJzdCk7XG4gICAgfSxcbiAgICBzdGF0ZUNoYW5nZXMoZXZlbnRzPzogQ2hpbGRFdmVudFtdKSB7XG4gICAgICByZXR1cm4gc3RhdGVDaGFuZ2VzPFQ+KHF1ZXJ5LCBldmVudHMsIG91dHNpZGVBbmd1bGFyU2NoZWR1bGVyKS5waXBlKGFmRGF0YWJhc2Uua2VlcFVuc3RhYmxlVW50aWxGaXJzdCk7XG4gICAgfSxcbiAgICBhdWRpdFRyYWlsKGV2ZW50cz86IENoaWxkRXZlbnRbXSkge1xuICAgICAgcmV0dXJuIGF1ZGl0VHJhaWw8VD4ocXVlcnksIGV2ZW50cywgb3V0c2lkZUFuZ3VsYXJTY2hlZHVsZXIpLnBpcGUoYWZEYXRhYmFzZS5rZWVwVW5zdGFibGVVbnRpbEZpcnN0KTtcbiAgICB9LFxuICAgIHZhbHVlQ2hhbmdlcyhldmVudHM/OiBDaGlsZEV2ZW50W10pIHtcbiAgICAgIGNvbnN0IHNuYXBzaG90Q2hhbmdlcyQgPSBzbmFwc2hvdENoYW5nZXM8VD4ocXVlcnksIGV2ZW50cywgb3V0c2lkZUFuZ3VsYXJTY2hlZHVsZXIpO1xuICAgICAgcmV0dXJuIHNuYXBzaG90Q2hhbmdlcyQucGlwZShcbiAgICAgICAgbWFwKGFjdGlvbnMgPT4gYWN0aW9ucy5tYXAoYSA9PiBhLnBheWxvYWQudmFsKCkgYXMgVCkpLFxuICAgICAgICBhZkRhdGFiYXNlLmtlZXBVbnN0YWJsZVVudGlsRmlyc3RcbiAgICAgICk7XG4gICAgfVxuICB9O1xufVxuIl19