"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getOwnPropertyNames = require("babel-runtime/core-js/object/get-own-property-names");

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _weakMap = require("babel-runtime/core-js/weak-map");

var _weakMap2 = _interopRequireDefault(_weakMap);

exports.getPropertyNames = getPropertyNames;
exports.addRegisterProvider = addRegisterProvider;
exports.addInjectProvider = addInjectProvider;
exports.inject = inject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var instancesMap = new _weakMap2.default();
var injectProviders = [];
var registerProviders = [];

function defaultInjectProvider(instance, propertyName, Class) {
    var ClassWrapper = function (_Class) {
        (0, _inherits3.default)(ClassWrapper, _Class);

        function ClassWrapper() {
            var _ref;

            (0, _classCallCheck3.default)(this, ClassWrapper);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = ClassWrapper.__proto__ || (0, _getPrototypeOf2.default)(ClassWrapper)).call.apply(_ref, [this].concat(args)));

            _this[propertyName] = instance;
            return _this;
        }

        return ClassWrapper;
    }(Class);

    ClassWrapper.WrappedComponent = Class;
    ClassWrapper.OriginalClass = Class.OriginalClass || Class;
    ClassWrapper.displayName = Class.displayName || Class.name;
    return ClassWrapper;
}

function getClassInstance(Class) {
    var instance = instancesMap.get(Class);

    if (!instance) {
        instance = new Class();
        instancesMap.set(Class, instance);

        registerClass(Class, instance);
    }

    return instance;
}

function registerClass(Class, instance) {
    registerProviders.forEach(function (registerProvider) {
        return registerProvider(Class, instance);
    });
}

function getPropertyNames(Class) {
    var prototype = Class.OriginalClass ? Class.OriginalClass.prototype : Class.prototype;
    return (0, _getOwnPropertyNames2.default)(prototype).filter(function (propertyName) {
        return propertyName !== "constructor";
    });
}

function addRegisterProvider(registerProvider) {
    registerProviders.push(registerProvider);
}

function addInjectProvider(injectProvider) {
    injectProviders.push(injectProvider);
}

function inject(Class, propertyName) {
    return function (TargetClass) {
        var instance = getClassInstance(Class);

        var NewClass = injectProviders.reduceRight(function (NewClass, injectProvider) {
            return injectProvider(instance, propertyName, NewClass);
        }, TargetClass);

        if (NewClass === TargetClass) {
            return defaultInjectProvider(instance, propertyName, TargetClass);
        }

        return NewClass;
    };
}