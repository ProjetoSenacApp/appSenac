'use strict';

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _ = require('..');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Injector', function () {
    var Foo = function Foo() {
        (0, _classCallCheck3.default)(this, Foo);
    };

    it('should inject Foo', function () {
        var Bar = function Bar() {
            (0, _classCallCheck3.default)(this, Bar);
        };

        var NewBar = (0, _.inject)(Foo, 'foo')(Bar);
        expect(NewBar.WrappedComponent).toBe(Bar);
        expect(NewBar.OriginalClass).toBe(Bar);
        expect(NewBar.displayName).toBe(Bar.name);

        var bar = new NewBar();

        expect(bar.foo).toBeDefined();
    });

    it('should inject Foo multiple times', function () {
        var Bar1 = function Bar1() {
            (0, _classCallCheck3.default)(this, Bar1);
        };

        var Bar2 = function Bar2() {
            (0, _classCallCheck3.default)(this, Bar2);
        };

        var NewBar1 = (0, _.inject)(Foo, 'foo')(Bar1);
        var NewBar2 = (0, _.inject)(Foo, 'foo')(Bar2);
        var bar1 = new NewBar1();
        var bar2 = new NewBar2();

        expect(bar1.foo).toBe(bar2.foo);
    });

    it('should not call default injector provider when injector provider is registered', function () {
        var NewClass = function NewClass() {
            (0, _classCallCheck3.default)(this, NewClass);
        };

        (0, _.addInjectProvider)(function () {
            return NewClass;
        });

        var Bar = function Bar() {
            (0, _classCallCheck3.default)(this, Bar);
        };

        var NewBar = (0, _.inject)(Foo, 'foo')(Bar);
        var newBar = new NewBar();

        expect(NewBar).toBe(NewClass);
        expect(newBar.foo).toBeUndefined();
    });
});