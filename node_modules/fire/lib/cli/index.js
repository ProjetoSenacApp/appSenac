'use strict';

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _dotenv = require('dotenv');

var _dotenv2 = _interopRequireDefault(_dotenv);

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _index = require('./build/index.js');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('./start/index.js');

var _index4 = _interopRequireDefault(_index3);

var _index5 = require('./release/index.js');

var _index6 = _interopRequireDefault(_index5);

var _index7 = require('./fly/index.js');

var _index8 = _interopRequireDefault(_index7);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function main() {
    var argv = (0, _minimist2.default)(process.argv.slice(2));

    var _argv$_ = (0, _slicedToArray3.default)(argv._, 1),
        topic = _argv$_[0];

    var entry = _path2.default.join(process.cwd(), 'src', 'index.js');

    _dotenv2.default.load({
        silent: true
    });

    var isDevelopment = !process.env.NODE_ENV || process.env.NODE_ENV === 'development';

    if (isDevelopment && !process.env.LEGO_DISABLE_SSL) {
        process.env.LEGO_DISABLE_SSL = 'true';
    }

    try {
        process.env.FIRE_STAGE = topic;

        switch (topic) {
            case 'build':
                return (0, _index2.default)(entry, argv);

            case 'start':
                return isDevelopment && !argv.web && !argv.workers ? (0, _index8.default)(entry) : (0, _index4.default)(argv.workers ? 'workers' : 'web');

            case 'release':
                return (0, _index6.default)(entry, argv);

            case 'fly':
                return (0, _index8.default)(entry, argv);

            default:
                return console.log('Unknown topic ' + _index8.default + '.');
        }
    } catch (e) {
        console.log('exceptionnn');
        console.log(e);
        console.log(e.stack);
        throw e;
    }
}

main();