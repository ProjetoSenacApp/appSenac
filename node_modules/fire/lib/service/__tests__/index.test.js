'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _serverService = require('../server-service.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

describe('ServerService', function () {
    var context = {
        request: {
            body: []
        }
    };

    describe('@allow', function () {
        it('should allow when @allow returns true', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
            var _dec, _desc, _value, _class;

            var MyService, myService, allowed;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            MyService = (_dec = (0, _serverService.allow)(function () {
                                return function () {
                                    return true;
                                };
                            }), (_class = function () {
                                function MyService() {
                                    (0, _classCallCheck3.default)(this, MyService);
                                }

                                (0, _createClass3.default)(MyService, [{
                                    key: 'test',
                                    value: function test() {}
                                }]);
                                return MyService;
                            }(), (_applyDecoratedDescriptor(_class.prototype, 'test', [_dec], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'test'), _class.prototype)), _class));
                            myService = new MyService();
                            _context.next = 4;
                            return (0, _serverService.isAllowed)(myService, 'test', context);

                        case 4:
                            allowed = _context.sent;


                            expect(allowed).toBe(true);

                        case 6:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, undefined);
        })));

        it('should disallow when @allow returns false', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
            var _dec2, _desc2, _value2, _class2;

            var MyService, myService, allowed;
            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            MyService = (_dec2 = (0, _serverService.allow)(function () {
                                return function () {
                                    return false;
                                };
                            }), (_class2 = function () {
                                function MyService() {
                                    (0, _classCallCheck3.default)(this, MyService);
                                }

                                (0, _createClass3.default)(MyService, [{
                                    key: 'test',
                                    value: function test() {}
                                }]);
                                return MyService;
                            }(), (_applyDecoratedDescriptor(_class2.prototype, 'test', [_dec2], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, 'test'), _class2.prototype)), _class2));
                            myService = new MyService();
                            _context2.next = 4;
                            return (0, _serverService.isAllowed)(myService, 'test', context);

                        case 4:
                            allowed = _context2.sent;


                            expect(allowed).toBe(false);

                        case 6:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, undefined);
        })));

        it('should disallow when @allow returns undefined', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
            var _dec3, _desc3, _value3, _class3;

            var MyService, myService, allowed;
            return _regenerator2.default.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            MyService = (_dec3 = (0, _serverService.allow)(function () {
                                return function () {
                                    return void 0;
                                };
                            }), (_class3 = function () {
                                function MyService() {
                                    (0, _classCallCheck3.default)(this, MyService);
                                }

                                (0, _createClass3.default)(MyService, [{
                                    key: 'test',
                                    value: function test() {}
                                }]);
                                return MyService;
                            }(), (_applyDecoratedDescriptor(_class3.prototype, 'test', [_dec3], (0, _getOwnPropertyDescriptor2.default)(_class3.prototype, 'test'), _class3.prototype)), _class3));
                            myService = new MyService();
                            _context3.next = 4;
                            return (0, _serverService.isAllowed)(myService, 'test', context);

                        case 4:
                            allowed = _context3.sent;


                            expect(allowed).toBe(false);

                        case 6:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, undefined);
        })));
    });

    describe('@deny', function () {
        it('should disallow when @deny returns true', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
            var _dec4, _desc4, _value4, _class4;

            var MyService, myService, allowed;
            return _regenerator2.default.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            MyService = (_dec4 = (0, _serverService.deny)(function () {
                                return function () {
                                    return true;
                                };
                            }), (_class4 = function () {
                                function MyService() {
                                    (0, _classCallCheck3.default)(this, MyService);
                                }

                                (0, _createClass3.default)(MyService, [{
                                    key: 'test',
                                    value: function test() {}
                                }]);
                                return MyService;
                            }(), (_applyDecoratedDescriptor(_class4.prototype, 'test', [_dec4], (0, _getOwnPropertyDescriptor2.default)(_class4.prototype, 'test'), _class4.prototype)), _class4));
                            myService = new MyService();
                            _context4.next = 4;
                            return (0, _serverService.isAllowed)(myService, 'test', context);

                        case 4:
                            allowed = _context4.sent;


                            expect(allowed).toBe(false);

                        case 6:
                        case 'end':
                            return _context4.stop();
                    }
                }
            }, _callee4, undefined);
        })));

        it('should allow when @deny returns false', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
            var _dec5, _desc5, _value5, _class5;

            var MyService, myService, allowed;
            return _regenerator2.default.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            MyService = (_dec5 = (0, _serverService.deny)(function () {
                                return function () {
                                    return false;
                                };
                            }), (_class5 = function () {
                                function MyService() {
                                    (0, _classCallCheck3.default)(this, MyService);
                                }

                                (0, _createClass3.default)(MyService, [{
                                    key: 'test',
                                    value: function test() {}
                                }]);
                                return MyService;
                            }(), (_applyDecoratedDescriptor(_class5.prototype, 'test', [_dec5], (0, _getOwnPropertyDescriptor2.default)(_class5.prototype, 'test'), _class5.prototype)), _class5));
                            myService = new MyService();
                            _context5.next = 4;
                            return (0, _serverService.isAllowed)(myService, 'test', context);

                        case 4:
                            allowed = _context5.sent;


                            expect(allowed).toBe(true);

                        case 6:
                        case 'end':
                            return _context5.stop();
                    }
                }
            }, _callee5, undefined);
        })));

        it('should disallow when @deny returns undefined', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6() {
            var _dec6, _desc6, _value6, _class6;

            var MyService, myService, allowed;
            return _regenerator2.default.wrap(function _callee6$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            MyService = (_dec6 = (0, _serverService.deny)(function () {
                                return function () {
                                    return void 0;
                                };
                            }), (_class6 = function () {
                                function MyService() {
                                    (0, _classCallCheck3.default)(this, MyService);
                                }

                                (0, _createClass3.default)(MyService, [{
                                    key: 'test',
                                    value: function test() {}
                                }]);
                                return MyService;
                            }(), (_applyDecoratedDescriptor(_class6.prototype, 'test', [_dec6], (0, _getOwnPropertyDescriptor2.default)(_class6.prototype, 'test'), _class6.prototype)), _class6));
                            myService = new MyService();
                            _context6.next = 4;
                            return (0, _serverService.isAllowed)(myService, 'test', context);

                        case 4:
                            allowed = _context6.sent;


                            expect(allowed).toBe(false);

                        case 6:
                        case 'end':
                            return _context6.stop();
                    }
                }
            }, _callee6, undefined);
        })));
    });

    describe('@login', function () {
        it('should allow when @login is set', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7() {
            var _desc7, _value7, _class7;

            var MyService, myService, allowed;
            return _regenerator2.default.wrap(function _callee7$(_context7) {
                while (1) {
                    switch (_context7.prev = _context7.next) {
                        case 0:
                            MyService = (_class7 = function () {
                                function MyService() {
                                    (0, _classCallCheck3.default)(this, MyService);
                                }

                                (0, _createClass3.default)(MyService, [{
                                    key: 'test',
                                    value: function test() {}
                                }]);
                                return MyService;
                            }(), (_applyDecoratedDescriptor(_class7.prototype, 'test', [_serverService.login], (0, _getOwnPropertyDescriptor2.default)(_class7.prototype, 'test'), _class7.prototype)), _class7);
                            myService = new MyService();
                            _context7.next = 4;
                            return (0, _serverService.isAllowed)(myService, 'test', context);

                        case 4:
                            allowed = _context7.sent;


                            expect(allowed).toBe(true);

                        case 6:
                        case 'end':
                            return _context7.stop();
                    }
                }
            }, _callee7, undefined);
        })));
    });

    describe('multiple @allow, @deny', function () {
        it('should disallow when @allow returns true and @deny returns true', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8() {
            var _dec7, _dec8, _desc8, _value8, _class8;

            var MyService, myService, allowed;
            return _regenerator2.default.wrap(function _callee8$(_context8) {
                while (1) {
                    switch (_context8.prev = _context8.next) {
                        case 0:
                            MyService = (_dec7 = (0, _serverService.allow)(function () {
                                return function () {
                                    return true;
                                };
                            }), _dec8 = (0, _serverService.deny)(function () {
                                return function () {
                                    return true;
                                };
                            }), (_class8 = function () {
                                function MyService() {
                                    (0, _classCallCheck3.default)(this, MyService);
                                }

                                (0, _createClass3.default)(MyService, [{
                                    key: 'test',
                                    value: function test() {}
                                }]);
                                return MyService;
                            }(), (_applyDecoratedDescriptor(_class8.prototype, 'test', [_dec7, _dec8], (0, _getOwnPropertyDescriptor2.default)(_class8.prototype, 'test'), _class8.prototype)), _class8));
                            myService = new MyService();
                            _context8.next = 4;
                            return (0, _serverService.isAllowed)(myService, 'test', context);

                        case 4:
                            allowed = _context8.sent;


                            expect(allowed).toBe(false);

                        case 6:
                        case 'end':
                            return _context8.stop();
                    }
                }
            }, _callee8, undefined);
        })));

        it('should disallow when @allow returns false and @deny returns true', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9() {
            var _dec9, _dec10, _desc9, _value9, _class9;

            var MyService, myService, allowed;
            return _regenerator2.default.wrap(function _callee9$(_context9) {
                while (1) {
                    switch (_context9.prev = _context9.next) {
                        case 0:
                            MyService = (_dec9 = (0, _serverService.allow)(function () {
                                return function () {
                                    return false;
                                };
                            }), _dec10 = (0, _serverService.deny)(function () {
                                return function () {
                                    return true;
                                };
                            }), (_class9 = function () {
                                function MyService() {
                                    (0, _classCallCheck3.default)(this, MyService);
                                }

                                (0, _createClass3.default)(MyService, [{
                                    key: 'test',
                                    value: function test() {}
                                }]);
                                return MyService;
                            }(), (_applyDecoratedDescriptor(_class9.prototype, 'test', [_dec9, _dec10], (0, _getOwnPropertyDescriptor2.default)(_class9.prototype, 'test'), _class9.prototype)), _class9));
                            myService = new MyService();
                            _context9.next = 4;
                            return (0, _serverService.isAllowed)(myService, 'test', context);

                        case 4:
                            allowed = _context9.sent;


                            expect(allowed).toBe(false);

                        case 6:
                        case 'end':
                            return _context9.stop();
                    }
                }
            }, _callee9, undefined);
        })));

        it('should disallow when @allow returns false and @deny returns false', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10() {
            var _dec11, _dec12, _desc10, _value10, _class10;

            var MyService, myService, allowed;
            return _regenerator2.default.wrap(function _callee10$(_context10) {
                while (1) {
                    switch (_context10.prev = _context10.next) {
                        case 0:
                            MyService = (_dec11 = (0, _serverService.allow)(function () {
                                return function () {
                                    return false;
                                };
                            }), _dec12 = (0, _serverService.deny)(function () {
                                return function () {
                                    return false;
                                };
                            }), (_class10 = function () {
                                function MyService() {
                                    (0, _classCallCheck3.default)(this, MyService);
                                }

                                (0, _createClass3.default)(MyService, [{
                                    key: 'test',
                                    value: function test() {}
                                }]);
                                return MyService;
                            }(), (_applyDecoratedDescriptor(_class10.prototype, 'test', [_dec11, _dec12], (0, _getOwnPropertyDescriptor2.default)(_class10.prototype, 'test'), _class10.prototype)), _class10));
                            myService = new MyService();
                            _context10.next = 4;
                            return (0, _serverService.isAllowed)(myService, 'test', context);

                        case 4:
                            allowed = _context10.sent;


                            expect(allowed).toBe(false);

                        case 6:
                        case 'end':
                            return _context10.stop();
                    }
                }
            }, _callee10, undefined);
        })));

        it('should allow when @allow returns true and @deny returns false', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11() {
            var _dec13, _dec14, _desc11, _value11, _class11;

            var MyService, myService, allowed;
            return _regenerator2.default.wrap(function _callee11$(_context11) {
                while (1) {
                    switch (_context11.prev = _context11.next) {
                        case 0:
                            MyService = (_dec13 = (0, _serverService.allow)(function () {
                                return function () {
                                    return true;
                                };
                            }), _dec14 = (0, _serverService.deny)(function () {
                                return function () {
                                    return false;
                                };
                            }), (_class11 = function () {
                                function MyService() {
                                    (0, _classCallCheck3.default)(this, MyService);
                                }

                                (0, _createClass3.default)(MyService, [{
                                    key: 'test',
                                    value: function test() {}
                                }]);
                                return MyService;
                            }(), (_applyDecoratedDescriptor(_class11.prototype, 'test', [_dec13, _dec14], (0, _getOwnPropertyDescriptor2.default)(_class11.prototype, 'test'), _class11.prototype)), _class11));
                            myService = new MyService();
                            _context11.next = 4;
                            return (0, _serverService.isAllowed)(myService, 'test', context);

                        case 4:
                            allowed = _context11.sent;


                            expect(allowed).toBe(true);

                        case 6:
                        case 'end':
                            return _context11.stop();
                    }
                }
            }, _callee11, undefined);
        })));
    });
});