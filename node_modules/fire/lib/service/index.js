'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Service = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _class, _temp;

exports.getServiceNames = getServiceNames;
exports.getService = getService;
exports.setService = setService;
exports.setHistory = setHistory;
exports.registerService = registerService;

var _ = require('..');

var _index = require('./jwt/index.js');

var _index2 = require('../injector/index.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var services = {};

function getServiceNames() {
    return (0, _keys2.default)(services);
}

function getService(serviceName) {
    return services[serviceName];
}

function setService(serviceName, Service) {
    services[serviceName] = Service;
}

function setHistory(history) {
    Service.history = history;
}

var Service = exports.Service = (_temp = _class = function () {
    function Service(context, schema) {
        var _this = this;

        (0, _classCallCheck3.default)(this, Service);

        this.context = context;
        this.schema = schema;

        if ((0, _.isClient)()) {
            var serviceName = this.constructor.displayName || this.constructor.name;
            var propertyNames = (0, _index2.getPropertyNames)(this.constructor);

            var createFetch = function createFetch(propertyName) {
                var doFetch = function () {
                    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }

                        var response;
                        return _regenerator2.default.wrap(function _callee$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        _context.next = 2;
                                        return fetch('/_api?method=' + serviceName + '.' + propertyName, {
                                            credentials: 'same-origin',
                                            method: 'POST',
                                            body: (0, _stringify2.default)(args),
                                            headers: {
                                                'Content-Type': 'application/json'
                                            }
                                        });

                                    case 2:
                                        response = _context.sent;
                                        return _context.abrupt('return', response);

                                    case 4:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, _callee, this);
                    }));

                    return function doFetch() {
                        return _ref.apply(this, arguments);
                    };
                }();

                doFetch.toSrc = function () {
                    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                        args[_key2] = arguments[_key2];
                    }

                    return '/_api?method=' + serviceName + '.' + propertyName + '&args=' + (0, _stringify2.default)(args);
                };

                return doFetch;
            };
            propertyNames.forEach(function (propertyName) {
                _this[propertyName] = createFetch(propertyName);
            });
        }
    }

    (0, _createClass3.default)(Service, [{
        key: 'getPayload',
        value: function getPayload() {
            // TODO: This should only be available on the server.

            try {
                var token = this.context.cookies.get('t');

                if (token) {
                    return (0, _index.getPayload)(token);
                }
            } catch (e) {
                console.log('exception in service');
                console.log(e);
            }

            return null;
        }
    }]);
    return Service;
}(), _class.history = null, _temp);
function registerService(Service) {
    setService(Service.displayName || Service.name, Service);
}

(0, _index2.addRegisterProvider)(function (Class, service) {
    if (service instanceof Service) {
        registerService(Class);
    }
});