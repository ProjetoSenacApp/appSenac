'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isAllowed = undefined;

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _symbol = require('babel-runtime/core-js/symbol');

var _symbol2 = _interopRequireDefault(_symbol);

var getPayloadFromContext = function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(context) {
        var token;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.prev = 0;
                        token = context.cookies.get('t');

                        if (!token) {
                            _context.next = 4;
                            break;
                        }

                        return _context.abrupt('return', (0, _index.getPayload)(token));

                    case 4:
                        _context.next = 8;
                        break;

                    case 6:
                        _context.prev = 6;
                        _context.t0 = _context['catch'](0);

                    case 8:
                        return _context.abrupt('return', null);

                    case 9:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this, [[0, 6]]);
    }));

    return function getPayloadFromContext(_x) {
        return _ref.apply(this, arguments);
    };
}();

var isAllowed = exports.isAllowed = function () {
    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(service, methodName, context) {
        var _this = this;

        var accessControls, results;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        accessControls = service[accessControlSymbol] && service[accessControlSymbol][methodName];

                        if (!(accessControls && accessControls.length > 0)) {
                            _context3.next = 14;
                            break;
                        }

                        _context3.prev = 2;
                        _context3.next = 5;
                        return _promise2.default.all(accessControls.map(function () {
                            var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(accessControl) {
                                var accessControlFunc, type, payload, authFunc, result;
                                return _regenerator2.default.wrap(function _callee2$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                accessControlFunc = accessControl.accessControlFunc, type = accessControl.type;
                                                _context2.next = 3;
                                                return getPayloadFromContext(context);

                                            case 3:
                                                payload = _context2.sent;
                                                _context2.next = 6;
                                                return accessControlFunc(payload);

                                            case 6:
                                                authFunc = _context2.sent;
                                                _context2.t0 = authFunc === true;

                                                if (_context2.t0) {
                                                    _context2.next = 15;
                                                    break;
                                                }

                                                _context2.t1 = authFunc;

                                                if (!_context2.t1) {
                                                    _context2.next = 14;
                                                    break;
                                                }

                                                _context2.next = 13;
                                                return authFunc.apply(undefined, (0, _toConsumableArray3.default)(context.request.body));

                                            case 13:
                                                _context2.t1 = _context2.sent;

                                            case 14:
                                                _context2.t0 = _context2.t1;

                                            case 15:
                                                result = _context2.t0;
                                                return _context2.abrupt('return', result === true && type === ACCESS_CONTROL_ALLOW || result === false && type === ACCESS_CONTROL_DENY);

                                            case 17:
                                            case 'end':
                                                return _context2.stop();
                                        }
                                    }
                                }, _callee2, _this);
                            }));

                            return function (_x5) {
                                return _ref3.apply(this, arguments);
                            };
                        }()));

                    case 5:
                        results = _context3.sent;
                        return _context3.abrupt('return', results.every(function (result) {
                            return result === true;
                        }));

                    case 9:
                        _context3.prev = 9;
                        _context3.t0 = _context3['catch'](2);

                        console.log('exception in not allowed');
                        console.log(_context3.t0);

                        context.throw(401);

                    case 14:
                        return _context3.abrupt('return', false);

                    case 15:
                    case 'end':
                        return _context3.stop();
                }
            }
        }, _callee3, this, [[2, 9]]);
    }));

    return function isAllowed(_x2, _x3, _x4) {
        return _ref2.apply(this, arguments);
    };
}();

exports.allow = allow;
exports.deny = deny;
exports.login = login;
exports.logout = logout;

var _index = require('./jwt/index.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ACCESS_CONTROL_ALLOW = 'allow';
var ACCESS_CONTROL_DENY = 'deny';

// TODO: change this to a generic "after" middleware.
var handlersSymbol = (0, _symbol2.default)();
var accessControlSymbol = (0, _symbol2.default)();

function addAccessControl(target, key, type, accessControlFunc) {
    if (!target[accessControlSymbol]) {
        target[accessControlSymbol] = {};
    }

    if (!target[accessControlSymbol][key]) {
        target[accessControlSymbol][key] = [];
    }

    target[accessControlSymbol][key].push({
        accessControlFunc: accessControlFunc,
        type: type
    });
}

function allow(accessControlFunc) {
    return function (target, key) {
        addAccessControl(target, key, ACCESS_CONTROL_ALLOW, accessControlFunc);
    };
}

function deny(accessControlFunc) {
    return function (target, key) {
        addAccessControl(target, key, ACCESS_CONTROL_DENY, accessControlFunc);
    };
}

function login(target, key) {
    if (!target[handlersSymbol]) {
        target[handlersSymbol] = {};
    }

    if (!target[handlersSymbol][key]) {
        target[handlersSymbol][key] = [];
    }

    target[handlersSymbol][key].push({
        type: 'login'
    });

    // Allow the user to invoke this method.
    addAccessControl(target, key, ACCESS_CONTROL_ALLOW, function () {
        return function () {
            return true;
        };
    });
}

function logout(target, key) {
    if (!target[handlersSymbol]) {
        target[handlersSymbol] = {};
    }

    if (!target[handlersSymbol][key]) {
        target[handlersSymbol][key] = [];
    }

    target[handlersSymbol][key].push({
        type: 'logout'
    });

    // Allow logged in users to invoke this method.
    addAccessControl(target, key, ACCESS_CONTROL_ALLOW, function (payload) {
        return Boolean(payload);
    });
}

exports.default = function () {
    var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(Service, methodName, context, schema) {
        var _this2 = this;

        var service, allowed, args, body, handlers, methodHandlers;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
            while (1) {
                switch (_context6.prev = _context6.next) {
                    case 0:
                        service = new Service(context, schema);
                        _context6.next = 3;
                        return isAllowed(service, methodName, context);

                    case 3:
                        allowed = _context6.sent;

                        if (allowed) {
                            _context6.next = 7;
                            break;
                        }

                        context.throw(401);
                        return _context6.abrupt('return');

                    case 7:
                        _context6.prev = 7;
                        args = context.method === 'POST' ? context.request.body : JSON.parse(context.request.query.args);
                        _context6.next = 11;
                        return _promise2.default.resolve(service[methodName].apply(service, (0, _toConsumableArray3.default)(args)));

                    case 11:
                        body = _context6.sent;
                        handlers = {
                            login: function () {
                                var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(body) {
                                    var payload, token;
                                    return _regenerator2.default.wrap(function _callee4$(_context4) {
                                        while (1) {
                                            switch (_context4.prev = _context4.next) {
                                                case 0:
                                                    // TODO: It should be possible to pass a
                                                    payload = body && { id: body.id };

                                                    // TODO: Also add the ip and user agent to the payload.

                                                    _context4.next = 3;
                                                    return (0, _index.createToken)(payload);

                                                case 3:
                                                    token = _context4.sent;

                                                    context.cookies.set('t', token, {
                                                        httpOnly: true
                                                    });

                                                case 5:
                                                case 'end':
                                                    return _context4.stop();
                                            }
                                        }
                                    }, _callee4, _this2);
                                }));

                                return function login(_x10) {
                                    return _ref5.apply(this, arguments);
                                };
                            }(),

                            logout: function () {
                                var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
                                    return _regenerator2.default.wrap(function _callee5$(_context5) {
                                        while (1) {
                                            switch (_context5.prev = _context5.next) {
                                                case 0:
                                                    context.cookies.set('t');

                                                case 1:
                                                case 'end':
                                                    return _context5.stop();
                                            }
                                        }
                                    }, _callee5, _this2);
                                }));

                                return function logout() {
                                    return _ref6.apply(this, arguments);
                                };
                            }()
                        };
                        methodHandlers = service[handlersSymbol] && service[handlersSymbol][methodName];

                        if (!(methodHandlers && methodHandlers.length > 0)) {
                            _context6.next = 17;
                            break;
                        }

                        _context6.next = 17;
                        return _promise2.default.all(methodHandlers.map(function (methodHandler) {
                            var handler = handlers[methodHandler.type];

                            return handler(body);
                        }));

                    case 17:

                        // TODO: Check if we did a redirect?

                        if (typeof body !== 'undefined') {
                            context.type = 'json';
                            context.body = (0, _stringify2.default)(body);
                        } else {
                            // If the body is undefined, we assume the user handled the context directly.
                        }
                        _context6.next = 25;
                        break;

                    case 20:
                        _context6.prev = 20;
                        _context6.t0 = _context6['catch'](7);

                        console.log('error?!');
                        console.log(_context6.t0);

                        // TODO: Error!
                        context.throw(501);

                    case 25:
                    case 'end':
                        return _context6.stop();
                }
            }
        }, _callee6, this, [[7, 20]]);
    }));

    function callServerService(_x6, _x7, _x8, _x9) {
        return _ref4.apply(this, arguments);
    }

    return callServerService;
}();