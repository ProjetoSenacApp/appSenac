'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _getOwnPropertyNames = require('babel-runtime/core-js/object/get-own-property-names');

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _class, _temp;

var _mobx = require('mobx');

var _index = require('../injector/index.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Store = (_temp = _class = function () {
    function Store() {
        (0, _classCallCheck3.default)(this, Store);
    }

    (0, _createClass3.default)(Store, [{
        key: 'history',
        get: function get() {
            return Store.history;
        }
    }], [{
        key: 'setHistory',
        value: function setHistory(history) {
            Store.history = history;
        }
    }]);
    return Store;
}(), _class.history = null, _temp);
exports.default = Store;


(0, _index.addRegisterProvider)(function (Class, store) {
    if (store instanceof Store) {
        (function () {
            var descriptors = new _set2.default();
            var obj = store;
            do {
                // The last prototype in the chain is Object, but we don;t need it's own property names.
                // So we check if there is another prototype after this object, and if not, we know
                // this is Object so we're finished.
                if (!(0, _getPrototypeOf2.default)(obj)) {
                    break;
                }

                (0, _getOwnPropertyNames2.default)(obj).forEach(function (propertyName) {
                    if (propertyName !== 'constructor') {
                        var descriptor = (0, _getOwnPropertyDescriptor2.default)(obj, propertyName);
                        descriptors.add({
                            propertyName: propertyName,
                            descriptor: descriptor
                        });
                    }
                });
            } while (obj = (0, _getPrototypeOf2.default)(obj));

            var items = (0, _from2.default)(descriptors).reduce(function (items, _ref) {
                var descriptor = _ref.descriptor,
                    propertyName = _ref.propertyName;

                // TODO: What if there is a descriptor.set?
                var isComputed = descriptor.get && !descriptor.set && !descriptor.value;
                var isAction = typeof store[propertyName] === 'function';

                if (isComputed) {
                    // TODO: What if we have a getter and a setter?

                    items[propertyName] = (0, _mobx.computed)(descriptor.get);
                } else if (isAction) {
                    // TODO: Properly set this as an action.

                    // items[propertyName] = action(propertyName, store[propertyName]);
                    items[propertyName] = store[propertyName];
                } else {
                    items[propertyName] = store[propertyName];
                }

                return items;
            }, {});

            (0, _mobx.extendObservable)(store, items);
        })();
    }
});