'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Queue = function () {
    function Queue(queueUrl) {
        (0, _classCallCheck3.default)(this, Queue);
        var _process$env = process.env,
            AWS_SQS_ACCESS_KEY_ID = _process$env.AWS_SQS_ACCESS_KEY_ID,
            AWS_SQS_SECRET_ACCESS_KEY = _process$env.AWS_SQS_SECRET_ACCESS_KEY,
            AWS_SQS_REGION = _process$env.AWS_SQS_REGION,
            AWS_ACCESS_KEY_ID = _process$env.AWS_ACCESS_KEY_ID,
            AWS_SECRET_ACCESS_KEY = _process$env.AWS_SECRET_ACCESS_KEY,
            AWS_REGION = _process$env.AWS_REGION;


        this.queueUrl = queueUrl;
        this.sqs = new _awsSdk2.default.SQS({
            accessKeyId: AWS_SQS_ACCESS_KEY_ID || AWS_ACCESS_KEY_ID,
            secretAccessKey: AWS_SQS_SECRET_ACCESS_KEY || AWS_SECRET_ACCESS_KEY,
            region: AWS_SQS_REGION || AWS_REGION
        });
    }

    (0, _createClass3.default)(Queue, [{
        key: 'sendMessage',
        value: function sendMessage(name, args) {
            var _this = this;

            return new _promise2.default(function (resolve, reject) {
                var body = {
                    name: name,
                    args: args
                };
                var params = {
                    QueueUrl: _this.queueUrl,
                    MessageBody: (0, _stringify2.default)(body)
                };

                _this.sqs.sendMessage(params, function (error, data) {
                    if (error) {
                        reject(error);
                    } else {
                        resolve(data);
                    }
                });
            });
        }
    }, {
        key: 'deleteMessage',
        value: function deleteMessage(receiptHandle) {
            var _this2 = this;

            return new _promise2.default(function (resolve, reject) {
                var params = {
                    QueueUrl: _this2.queueUrl,
                    ReceiptHandle: receiptHandle
                };

                _this2.sqs.deleteMessage(params, function (error, data) {
                    if (error) {
                        reject(error);
                    } else {
                        resolve(data);
                    }
                });
            });
        }
    }, {
        key: 'receiveMessage',
        value: function receiveMessage(callback) {
            var _this3 = this;

            return new _promise2.default(function (resolve, reject) {
                var params = {
                    QueueUrl: _this3.queueUrl,
                    VisibilityTimeout: 30 * 60,
                    WaitTimeSeconds: 20
                };

                _this3.sqs.receiveMessage(params, function () {
                    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(error, data) {
                        var messages;
                        return _regenerator2.default.wrap(function _callee2$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        if (!error) {
                                            _context2.next = 4;
                                            break;
                                        }

                                        reject(error);
                                        _context2.next = 12;
                                        break;

                                    case 4:
                                        messages = data.Messages;

                                        if (!(messages && messages.length > 0)) {
                                            _context2.next = 11;
                                            break;
                                        }

                                        _context2.next = 8;
                                        return _promise2.default.all(messages.map(function () {
                                            var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(message) {
                                                var body, name, args;
                                                return _regenerator2.default.wrap(function _callee$(_context) {
                                                    while (1) {
                                                        switch (_context.prev = _context.next) {
                                                            case 0:
                                                                _context.prev = 0;
                                                                body = JSON.parse(message.Body);
                                                                name = body.name, args = body.args;
                                                                _context.next = 5;
                                                                return _promise2.default.resolve(callback(name, args));

                                                            case 5:
                                                                _context.next = 7;
                                                                return _this3.deleteMessage(message.ReceiptHandle);

                                                            case 7:
                                                                _context.next = 11;
                                                                break;

                                                            case 9:
                                                                _context.prev = 9;
                                                                _context.t0 = _context['catch'](0);

                                                            case 11:
                                                            case 'end':
                                                                return _context.stop();
                                                        }
                                                    }
                                                }, _callee, _this3, [[0, 9]]);
                                            }));

                                            return function (_x3) {
                                                return _ref2.apply(this, arguments);
                                            };
                                        }()
                                        // TODO: Should we delete this message?
                                        ));

                                    case 8:

                                        resolve(true);
                                        _context2.next = 12;
                                        break;

                                    case 11:
                                        resolve(false);

                                    case 12:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, _callee2, _this3);
                    }));

                    return function (_x, _x2) {
                        return _ref.apply(this, arguments);
                    };
                }());
            });
        }
    }]);
    return Queue;
}();

exports.default = Queue;