'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

exports.getWorkers = getWorkers;
exports.startWorkers = startWorkers;

var _fireLog = require('fire-log');

var _fireLog2 = _interopRequireDefault(_fireLog);

var _sqlModels = require('sql-models');

var _queue = require('./queue.js');

var _queue2 = _interopRequireDefault(_queue);

var _index = require('../injector/index.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = new _fireLog2.default('fire:worker');
var workers = [];

function getWorkers() {
    return workers;
}

function startWorkers() {
    log.info('Starting ' + workers.length + ' workers.');

    _sqlModels.Schema.autoLoadTables();

    var schema = new _sqlModels.Schema();

    workers.forEach(function (Worker) {
        var worker = new Worker(false, schema);
        worker.start();
    });
}

var Worker = function () {
    function Worker() {
        var replaceProperties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        var schema = arguments[1];
        (0, _classCallCheck3.default)(this, Worker);
        this.queue = null;
        this.schema = null;

        this.queue = new _queue2.default(this.getQueueUrl());
        this.schema = schema;

        if (replaceProperties) {
            this.replaceProperties();
        }
    }

    (0, _createClass3.default)(Worker, [{
        key: 'replaceProperties',
        value: function replaceProperties() {
            var _this = this;

            log.info('Replacing property names in worker.');

            var propertyNames = (0, _index.getPropertyNames)(this.constructor);

            propertyNames.forEach(function (propertyName) {
                _this[propertyName] = function () {
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }

                    return _this.queue.sendMessage(propertyName, args);
                };
            });
        }
    }, {
        key: 'start',
        value: function start() {
            log.info('Start worker ' + this.name);

            this.receiveMessage();
        }
    }, {
        key: 'getQueueUrl',
        value: function getQueueUrl() {
            throw new Error('Worker#getQueueUrl() should be overridden to return a valid queue url.');
        }
    }, {
        key: 'receiveMessage',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
                var _this2 = this;

                var didConsumeMessages, timeout;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return this.queue.receiveMessage(function (name, args) {
                                    return _this2[name].apply(_this2, (0, _toConsumableArray3.default)(args));
                                });

                            case 2:
                                didConsumeMessages = _context.sent;


                                // TODO: This is very basic. Perhaps we want a nice backoff algorithm?
                                timeout = didConsumeMessages ? 0 : 1000 * 10;


                                setTimeout(function () {
                                    _this2.receiveMessage();
                                }, timeout);

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function receiveMessage() {
                return _ref.apply(this, arguments);
            }

            return receiveMessage;
        }()
    }]);
    return Worker;
}();

exports.default = Worker;


(0, _index.addRegisterProvider)(function (Class, worker) {
    if (worker instanceof Worker) {
        workers.push(Class);
    }
});