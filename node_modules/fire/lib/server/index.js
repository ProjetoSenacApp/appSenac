'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.addShims = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _koa = require('koa');

var _koa2 = _interopRequireDefault(_koa);

var _fireWebpack = require('fire-webpack');

var _koaWebpack = require('koa-webpack');

var _koaWebpack2 = _interopRequireDefault(_koaWebpack);

var _koaBodyparser = require('koa-bodyparser');

var _koaBodyparser2 = _interopRequireDefault(_koaBodyparser);

var _sqlModels = require('sql-models');

var _index = require('../service/index.js');

var _serverService = require('../service/server-service.js');

var _serverService2 = _interopRequireDefault(_serverService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.addShims = _fireWebpack.addShims;

exports.default = function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
        var _this = this;

        var app, serviceNames, compiler, schema;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        app = new _koa2.default();
                        serviceNames = (0, _index.getServiceNames)();
                        compiler = (0, _fireWebpack.createClientCompiler)(serviceNames);


                        _sqlModels.Schema.autoLoadTables();
                        schema = new _sqlModels.Schema();


                        app.use((0, _koaBodyparser2.default)());
                        app.use(function () {
                            var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(context, next) {
                                var _context$request$quer, _context$request$quer2, serviceName, methodName, Service;

                                return _regenerator2.default.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                if (!(context.path === '/_api' && (context.method === 'POST' || context.method === 'GET'))) {
                                                    _context.next = 21;
                                                    break;
                                                }

                                                _context.prev = 1;
                                                _context$request$quer = context.request.query.method.split('.'), _context$request$quer2 = (0, _slicedToArray3.default)(_context$request$quer, 2), serviceName = _context$request$quer2[0], methodName = _context$request$quer2[1];

                                                // TODO: If context.request.body is not an array, exit.

                                                // TODO: There should be some sort of check to see if executing this service method is
                                                // allowed.

                                                Service = (0, _index.getService)(serviceName);

                                                if (Service) {
                                                    _context.next = 8;
                                                    break;
                                                }

                                                console.log('Could not find service with name ' + serviceName);
                                                _context.next = 10;
                                                break;

                                            case 8:
                                                _context.next = 10;
                                                return (0, _serverService2.default)(Service, methodName, context, schema);

                                            case 10:
                                                _context.next = 19;
                                                break;

                                            case 12:
                                                _context.prev = 12;
                                                _context.t0 = _context['catch'](1);

                                                console.log('exception in server api');
                                                console.log(_context.t0);

                                                context.type = 'json';
                                                context.body = (0, _stringify2.default)({ error: true });
                                                context.status = _context.t0.status || 500;

                                            case 19:
                                                _context.next = 23;
                                                break;

                                            case 21:
                                                _context.next = 23;
                                                return next();

                                            case 23:
                                            case 'end':
                                                return _context.stop();
                                        }
                                    }
                                }, _callee, _this, [[1, 12]]);
                            }));

                            return function (_x, _x2) {
                                return _ref2.apply(this, arguments);
                            };
                        }());
                        app.use((0, _koaWebpack2.default)({
                            compiler: compiler,
                            dev: {
                                noInfo: true,
                                stats: false,
                                quiet: true,
                                log: false
                            },
                            hot: {
                                noInfo: true,
                                quiet: true,
                                stats: false,
                                log: false
                            }
                        }));
                        app.use(function () {
                            var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(context, next) {
                                return _regenerator2.default.wrap(function _callee2$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                _context2.next = 2;
                                                return next();

                                            case 2:

                                                // TODO: Server-render everything? Including the css!
                                                // TODO: We should use jsx and renderToString?
                                                context.type = 'html';
                                                context.body = '<!doctype html>\n        <html>\n        <head>\n          <title></title>\n        </head>\n        <body>\n            <div id="root"></div>\n        </body>\n        <script src="/client.js"></script>\n        </html>';

                                            case 4:
                                            case 'end':
                                                return _context2.stop();
                                        }
                                    }
                                }, _callee2, _this);
                            }));

                            return function (_x3, _x4) {
                                return _ref3.apply(this, arguments);
                            };
                        }());
                        app.listen(3000);

                    case 10:
                    case 'end':
                        return _context3.stop();
                }
            }
        }, _callee3, this);
    }));

    function createServer() {
        return _ref.apply(this, arguments);
    }

    return createServer;
}();