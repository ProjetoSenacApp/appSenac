'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

exports.createLib = createLib;
exports.addShims = addShims;
exports.configureWebpack = configureWebpack;
exports.createServerBundle = createServerBundle;
exports.createClientCompiler = createClientCompiler;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _write = require('write');

var _write2 = _interopRequireDefault(_write);

var _babelCore = require('babel-core');

var _webpackNodeExternals = require('webpack-node-externals');

var _webpackNodeExternals2 = _interopRequireDefault(_webpackNodeExternals);

var _babelPluginTransformStripClasses = require('babel-plugin-transform-strip-classes');

var _babelPluginTransformStripClasses2 = _interopRequireDefault(_babelPluginTransformStripClasses);

var _babelPluginTransformDecoratorsLegacy = require('babel-plugin-transform-decorators-legacy');

var _babelPluginTransformDecoratorsLegacy2 = _interopRequireDefault(_babelPluginTransformDecoratorsLegacy);

var _babelPluginTransformRuntime = require('babel-plugin-transform-runtime');

var _babelPluginTransformRuntime2 = _interopRequireDefault(_babelPluginTransformRuntime);

var _babelPresetFlow = require('babel-preset-flow');

var _babelPresetFlow2 = _interopRequireDefault(_babelPresetFlow);

var _babelPresetReact = require('babel-preset-react');

var _babelPresetReact2 = _interopRequireDefault(_babelPresetReact);

var _babelPresetEnv = require('babel-preset-env');

var _babelPresetEnv2 = _interopRequireDefault(_babelPresetEnv);

var _babelPresetStage = require('babel-preset-stage-3');

var _babelPresetStage2 = _interopRequireDefault(_babelPresetStage);

var _babelPresetStage3 = require('babel-preset-stage-2');

var _babelPresetStage4 = _interopRequireDefault(_babelPresetStage3);

var _lodash = require('lodash');

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _webpack3 = require('./webpack.js');

var _webpack4 = _interopRequireDefault(_webpack3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initialConfig = {
    entry: {},
    module: {
        loaders: []
    },
    target: null,
    output: null,
    plugins: [],
    resolve: {},
    stats: false
};

function createLib() {
    var files = _glob2.default.sync('**/*.js', {
        cwd: _path2.default.join(process.cwd(), 'src')
    });

    var options = {
        sourceMaps: 'both',
        presets: [_babelPresetFlow2.default, _babelPresetReact2.default, _babelPresetEnv2.default, _babelPresetStage2.default, _babelPresetStage4.default],
        plugins: [_babelPluginTransformDecoratorsLegacy2.default, _babelPluginTransformRuntime2.default]
    };
    files.forEach(function (file) {
        var _transformFileSync = (0, _babelCore.transformFileSync)(_path2.default.join(process.cwd(), 'src', file), options),
            code = _transformFileSync.code,
            map = _transformFileSync.map;

        _write2.default.sync(_path2.default.join(process.cwd(), '.build', 'lib', file), code);
        _write2.default.sync(_path2.default.join(process.cwd(), '.build', 'lib', file + '.map'), (0, _stringify2.default)(map));
    });
}

function addResolveAlias(shims) {
    return function (config) {
        var shimPath = _path2.default.join(__dirname, 'shim.js');

        config.resolve.alias = shims.reduce(function (alias, currentShim) {
            alias[currentShim] = shimPath;
            return alias;
        }, {});

        return config;
    };
}

function addClientConfig() {
    return function (config) {
        config.target = 'web';
        config.entry = {
            client: ['babel-polyfill', 'webpack-hot-middleware/client', 'isomorphic-fetch', _path2.default.join(process.cwd(), 'src', 'index.js'), 'fire/lib/client/index.js']
        };
        config.output = {
            publicPath: '/',
            path: '/',
            filename: '[name].js'
        };
        config.plugins = [new _webpack2.default.DefinePlugin({
            // NODE_ENV: JSON.stringify(`production`),
        }), new _webpack2.default.HotModuleReplacementPlugin(), new _webpack2.default.NoEmitOnErrorsPlugin()];

        // TODO: source-map exposes the server functions. If NODE_ENV=development only set source-map?
        config.devtool = 'source-map';
        config.node = {
            console: false,
            global: true,
            process: 'mock',
            __filename: 'mock',
            __dirname: 'mock',
            Buffer: true,
            setImmediate: true,
            fs: 'empty',
            tls: 'empty',
            child_process: 'empty',
            net: 'empty',
            crypto: 'empty',
            path: true
        };
        config.resolveLoader = {
            modules: [_path2.default.join(__dirname, '..', 'node_modules'), _path2.default.join(process.cwd(), 'node_modules'), 'node_modules']
        };
        config.resolve = {
            modules: [_path2.default.join(__dirname, '..', 'node_modules'), _path2.default.join(process.cwd(), 'node_modules'), 'node_modules']
        };
        return config;
    };
}

function addServerConfig(entry) {
    return function (config) {
        config.target = 'node';
        config.entry = {
            server: ['babel-polyfill', 'isomorphic-fetch', entry]
        };
        config.node = {
            __dirname: false
        };
        config.output = {
            publicPath: '/',
            path: _path2.default.join(process.cwd(), '.build'),
            filename: '[name].js'
        }, config.externals = [(0, _webpackNodeExternals2.default)()];
        config.plugins = [new _webpack2.default.NoEmitOnErrorsPlugin(), new _webpack2.default.DefinePlugin({
            NODE_ENV: process.env.NODE_ENV
        })];
        config.resolveLoader = {
            modules: [_path2.default.join(__dirname, '..', 'node_modules'), _path2.default.join(process.cwd(), 'node_modules'), 'node_modules']
        };
        config.resolve = {
            modules: [_path2.default.join(__dirname, '..', 'node_modules'), _path2.default.join(process.cwd(), 'node_modules'), 'node_modules']
        };
        return config;
    };
}

function addBabelStripClassesPlugin(serviceNames) {
    return function (config) {
        var loader = config.module.loaders.find(function (loader) {
            return loader.loader === 'babel-loader';
        });

        if (loader) {
            loader.options.plugins.splice(0, 0, [_babelPluginTransformStripClasses2.default, {
                classes: serviceNames
            }]);
        }

        return config;
    };
}

function addBabelLoader() {
    var babelPresetEnvOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return function (config) {
        config.module.loaders.push({
            test: /.js$/,
            exclude: /node_modules/,
            loader: 'babel-loader',
            options: {
                presets: [_babelPresetFlow2.default, _babelPresetReact2.default, [_babelPresetEnv2.default, babelPresetEnvOptions], _babelPresetStage2.default, _babelPresetStage4.default],
                plugins: [_babelPluginTransformDecoratorsLegacy2.default, _babelPluginTransformRuntime2.default]
            }
        });
        return config;
    };
}

var clientReducers = [];
var serverReducers = [];

var shimsInClient = ['fsevents', 'koa', 'webpack', 'koa-webpack', 'dns', 'lego-sql', 'babel-core', 'babel-preset-env'];
var shimsInServer = [];

function addShims(type, moduleNames) {
    if (type === 'client') {
        shimsInClient.splice.apply(shimsInClient, [0, 0].concat((0, _toConsumableArray3.default)(moduleNames)));
    } else if (type === 'server') {
        shimsInServer.splice.apply(shimsInServer, [0, 0].concat((0, _toConsumableArray3.default)(moduleNames)));
    } else {
        throw new Error('Invalid type');
    }
}

function configureWebpack(type, reducer) {
    if (type === 'client') {
        clientReducers.push(reducer);
    } else if (type === 'server') {
        serverReducers.push(reducer);
    } else {
        throw new Error('Unknown type "' + type + '". Type should be one of client or server.');
    }
}

function createWebpackConfig(reducers) {
    return reducers.reduce(function (config, reducer) {
        var nextConfig = reducer(config);
        return nextConfig;
    }, (0, _lodash.cloneDeep)(initialConfig));
}

function createServerBundle(entry) {
    var allReducers = [addServerConfig(entry), addBabelLoader(), addResolveAlias(shimsInServer)].concat(serverReducers);
    var webpackConfig = createWebpackConfig(allReducers);

    return (0, _webpack4.default)(webpackConfig);
}

function createClientCompiler(serviceNames) {
    var allReducers = [addClientConfig(), addBabelLoader({
        exclude: [
            // `transform-es2015-classes`,
        ]
    }), addBabelStripClassesPlugin(serviceNames), addResolveAlias(shimsInClient)].concat(clientReducers);
    var webpackConfig = createWebpackConfig(allReducers);

    //

    return (0, _webpack2.default)(webpackConfig);
}