'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LOG_LEVEL_SILENT = 0;
var LOG_LEVEL_ERROR = 1;
var LOG_LEVEL_WARN = 2;
var LOG_LEVEL_SUCCESS = 3;
var LOG_LEVEL_INFO = 4;
var LOG_LEVEL_VERBOSE = 5;
var LOG_LEVEL_SILLY = 6;

function getLogLevelName(logLevel) {
    switch (logLevel) {
        case LOG_LEVEL_ERROR:
            return 'ERR';
        case LOG_LEVEL_WARN:
            return 'WARN';
        case LOG_LEVEL_SUCCESS:
            return 'success';
        case LOG_LEVEL_INFO:
            return 'info';
        case LOG_LEVEL_VERBOSE:
            return '';
        case LOG_LEVEL_SILLY:
            return '';
    }

    return 'UNKNOWN';
}

function getLogLevelColors(logLevel) {
    switch (logLevel) {
        case LOG_LEVEL_ERROR:
            return ['#FFFFFF', '#B02C2C'];
        case LOG_LEVEL_WARN:
            return ['#000000', '#FFB302'];
        case LOG_LEVEL_SUCCESS:
            return ['#4ADD20', null];
        case LOG_LEVEL_INFO:
            return ['#FFEC02', null];
        case LOG_LEVEL_VERBOSE:
            return ['#222222', '#FFFFFF'];
        case LOG_LEVEL_SILLY:
            return ['#FFFFFF', '#FF00FF'];
    }

    return 'UNKNOWN';
}

function getLogLevelString(logLevel) {
    var logLevelName = getLogLevelName(logLevel);

    var _getLogLevelColors = getLogLevelColors(logLevel),
        _getLogLevelColors2 = (0, _slicedToArray3.default)(_getLogLevelColors, 2),
        color = _getLogLevelColors2[0],
        bgColor = _getLogLevelColors2[1];

    return bgColor ? _chalk2.default.bgHex(bgColor)(_chalk2.default.hex(color)(logLevelName)) : _chalk2.default.bold(_chalk2.default.hex(color)(logLevelName));
}

function length(string, maxLength, rightAlign) {
    var extra = '';

    if (string.length < maxLength) {
        for (var i = 0; i < maxLength - string.length; i++) {
            extra += ' ';
        }
    }

    return rightAlign ? extra + string.substring(0, maxLength) : string.substring(0, maxLength) + extra;
}

function getLogLevel(logLevelString) {
    switch (logLevelString) {
        case 'error':
            return LOG_LEVEL_ERROR;
        case 'warn':
            return LOG_LEVEL_WARN;
        case 'success':
            return LOG_LEVEL_SUCCESS;
        case 'info':
            return LOG_LEVEL_INFO;
        case 'verbose':
            return LOG_LEVEL_VERBOSE;
        case 'silly':
            return LOG_LEVEL_SILLY;
    }

    return LOG_LEVEL_INFO;
}

function getProcessName() {
    return process.env.FOREMAN_WORKER_NAME || 'web.1';
}

function getProcessColor() {
    // TODO: Get a random color based on the process name.
    return '#FF00FF';
}

var Log = function () {
    function Log(topic, levelString, debug) {
        (0, _classCallCheck3.default)(this, Log);
        this.level = LOG_LEVEL_SILENT;
        this.scope = new _set2.default();
        this.colors = new _map2.default();
        this.inScope = false;
        var _process$env = process.env,
            _process$env$LOG_LEVE = _process$env.LOG_LEVEL,
            LOG_LEVEL = _process$env$LOG_LEVE === undefined ? 'info' : _process$env$LOG_LEVE,
            _process$env$DEBUG = _process$env.DEBUG,
            DEBUG = _process$env$DEBUG === undefined ? '*' : _process$env$DEBUG;


        this.topic = topic;
        this.level = getLogLevel(levelString || LOG_LEVEL);

        var scopes = new _set2.default((debug || DEBUG).split(','));

        this.inScope = scopes.has(topic) || scopes.has('*') || scopes.has(topic.split(':', 1)[0] + ':*');
    }

    (0, _createClass3.default)(Log, [{
        key: 'log',
        value: function log(level, messages) {
            var _this = this;

            if (this.inScope && level <= this.level) {
                var isClient = typeof window !== 'undefined';

                messages.forEach(function (message) {
                    if (isClient) {
                        console.log(message); // eslint-disable-line no-console
                    } else {
                        var logLevelString = getLogLevelString(level);
                        var date = new Date();
                        var processName = getProcessName();

                        var line = [_chalk2.default.bold(_chalk2.default.hex(getProcessColor(processName))(length(date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds() + ' ' + processName, 17))), _chalk2.default.bold(_chalk2.default.hex('#AAAAAA')(length(_this.topic, 12, true))), _chalk2.default.bold(_chalk2.default.hex('#484C54')('|'))];

                        if (logLevelString) {
                            line.push(logLevelString);
                        }

                        line.push(message);

                        console.log(line.join(' ')); // eslint-disable-line no-console
                    }
                });
            }
        }
    }, {
        key: 'error',
        value: function error() {
            for (var _len = arguments.length, messages = Array(_len), _key = 0; _key < _len; _key++) {
                messages[_key] = arguments[_key];
            }

            this.log(LOG_LEVEL_ERROR, messages);
        }
    }, {
        key: 'warn',
        value: function warn() {
            for (var _len2 = arguments.length, messages = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                messages[_key2] = arguments[_key2];
            }

            this.log(LOG_LEVEL_WARN, messages);
        }
    }, {
        key: 'success',
        value: function success() {
            for (var _len3 = arguments.length, messages = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                messages[_key3] = arguments[_key3];
            }

            this.log(LOG_LEVEL_SUCCESS, messages);
        }
    }, {
        key: 'info',
        value: function info() {
            for (var _len4 = arguments.length, messages = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                messages[_key4] = arguments[_key4];
            }

            this.log(LOG_LEVEL_INFO, messages);
        }
    }, {
        key: 'verbose',
        value: function verbose() {
            for (var _len5 = arguments.length, messages = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                messages[_key5] = arguments[_key5];
            }

            this.log(LOG_LEVEL_VERBOSE, messages);
        }
    }, {
        key: 'silly',
        value: function silly() {
            for (var _len6 = arguments.length, messages = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                messages[_key6] = arguments[_key6];
            }

            this.log(LOG_LEVEL_SILLY, messages);
        }
    }]);
    return Log;
}();

exports.default = Log;