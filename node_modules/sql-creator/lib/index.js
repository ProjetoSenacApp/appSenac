'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports.default = createSql;

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getTables(tables) {
    return (0, _keys2.default)(tables).map(function (tableName) {
        return tables[tableName];
    });
}

function getTypes(types) {
    return (0, _keys2.default)(types).map(function (typeName) {
        return types[typeName];
    });
}

function getColumns(table) {
    return (0, _keys2.default)(table.columns).map(function (columnName) {
        return table.columns[columnName];
    });
}

function getModifiersSql(column) {
    var modifiers = [];

    if (column.modifiers.default) {
        modifiers.push('DEFAULT ' + column.modifiers.default);
    }

    if (column.modifiers.notNull) {
        modifiers.push('NOT NULL');
    }

    return modifiers.join(' ');
}

function getColumnSql(table, column) {
    var query = column.name + ' ' + column.dataType;

    if ((0, _keys2.default)(column.modifiers).length > 0) {
        query += ' ' + getModifiersSql(column);
    }

    // Find applicable indexes.
    table.indexes.forEach(function (index) {
        if (index.columns.length === 1 && index.columns[0] === column.name) {
            if (index.type === 'primaryKey') {
                query += ' PRIMARY KEY';
            } else if (index.type === 'foreignKey') {
                query += ' REFERENCES ' + index.tableName + ' (' + index.referenceColumns.join(', ') + ')';
            } else if (index.type === 'unique') {
                query += ' UNIQUE';
            } else if (index.type === 'check') {
                query += ' CHECK (' + index.expression + ')';
            }
        }
    });

    return query;
}

function isEqualColumn(fromColumn, toColumn) {
    if (!fromColumn || !toColumn || fromColumn.dataType !== toColumn.dataType) {
        return false;
    }

    var fromModifiers = fromColumn.modifiers;
    var toModifiers = toColumn.modifiers;
    return (!fromModifiers.notNull && !toModifiers.notNull || fromModifiers.notNull && toModifiers.notNull) && (!fromModifiers.primaryKey && !toModifiers.primaryKey || fromModifiers.primaryKey && toModifiers.primaryKey) && (!fromModifiers.default && !toModifiers.default || fromModifiers.default === toModifiers.default);
}

function isEqualTable(fromTable, toTable) {
    return (0, _keys2.default)(fromTable.columns).length === (0, _keys2.default)(toTable.columns).length && getColumns(fromTable).every(function (fromColumn) {
        return isEqualColumn(fromColumn, toTable.columns[fromColumn.name]);
    });
}

function createSql(from, to) {
    var queries = [];

    getTables(to.tables).forEach(function (toTable) {
        var fromTable = from.tables[toTable.name];

        if (!fromTable) {
            var tables = getTables(from.tables).filter(function (fromTable) {
                return isEqualTable(fromTable, toTable);
            });
            if (tables.length === 1) {
                var table = tables[0];
                var query = 'ALTER TABLE ' + table.name + ' RENAME TO ' + toTable.name;
                from.simulateQuery(query);
                queries.push(query);
            } else {
                var _query = 'CREATE TABLE ' + toTable.name + ' (\n' + (0, _keys2.default)(toTable.columns).map(function (columnName) {
                    return toTable.columns[columnName];
                }).map(function (column) {
                    return '\t' + getColumnSql(toTable, column);
                }).join(',\n') + '\n)';
                from.simulateQuery(_query);
                queries.push(_query);
            }
        } else {
            getColumns(toTable).forEach(function (toColumn) {
                var fromColumn = fromTable.columns[toColumn.name];

                if (!fromColumn) {
                    var columns = getColumns(fromTable).filter(function (fromColumn) {
                        return isEqualColumn(fromColumn, toColumn);
                    });
                    var column = columns[0];

                    if (columns.length === 1 && !toTable.columns[column.name]) {
                        var _query2 = 'ALTER TABLE ' + toTable.name + ' RENAME COLUMN ' + column.name + ' TO ' + toColumn.name;
                        from.simulateQuery(_query2);
                        queries.push(_query2);
                    } else {
                        var _query3 = 'ALTER TABLE ' + toTable.name + ' ADD COLUMN ' + getColumnSql(toTable, toColumn);

                        from.simulateQuery(_query3);
                        queries.push(_query3);
                    }
                } else {
                    // TODO: Create one alter table query if there are multiple changes.

                    if (fromColumn.dataType !== toColumn.dataType) {
                        var _query4 = 'ALTER TABLE ' + toTable.name + ' ALTER COLUMN ' + toColumn.name + ' SET DATA TYPE ' + toColumn.dataType;
                        from.simulateQuery(_query4);
                        queries.push(_query4);
                    }

                    if (fromColumn.modifiers.notNull && !toColumn.modifiers.notNull) {
                        var _query5 = 'ALTER TABLE ' + toTable.name + ' ALTER COLUMN ' + toColumn.name + ' DROP NOT NULL';
                        from.simulateQuery(_query5);
                        queries.push(_query5);
                    } else if (!fromColumn.modifiers.notNull && toColumn.modifiers.notNull) {
                        var _query6 = 'ALTER TABLE ' + toTable.name + ' ALTER COLUMN ' + toColumn.name + ' SET NOT NULL';
                        from.simulateQuery(_query6);
                        queries.push(_query6);
                    }

                    if (fromColumn.modifiers.default && !toColumn.modifiers.default) {
                        var _query7 = 'ALTER TABLE ' + toTable.name + ' ALTER COLUMN ' + toColumn.name + ' DROP DEFAULT';
                        from.simulateQuery(_query7);
                        queries.push(_query7);
                    } else if (!fromColumn.modifiers.default && toColumn.modifiers.default) {
                        var _query8 = 'ALTER TABLE ' + toTable.name + ' ALTER COLUMN ' + toColumn.name + ' SET DEFAULT ' + toColumn.modifiers.default;
                        from.simulateQuery(_query8);
                        queries.push(_query8);
                    }
                }
            });

            getColumns(fromTable).forEach(function (fromColumn) {
                var toColumn = toTable.columns[fromColumn.name];

                if (!toColumn) {
                    // TODO: Check if this was a rename.

                    var _query9 = 'ALTER TABLE ' + toTable.name + ' DROP COLUMN ' + fromColumn.name;
                    from.simulateQuery(_query9);
                    queries.push(_query9);
                }
            });

            fromTable.indexes.forEach(function (fromIndex) {
                var toIndex = toTable.indexes.find(function (toIndex) {
                    return (0, _lodash.isEqual)(toIndex, fromIndex);
                });

                if (!toIndex) {
                    var _query10 = 'ALTER TABLE ' + toTable.name + ' DROP CONSTRAINT ' + fromIndex.name;
                    from.simulateQuery(_query10);
                    queries.push(_query10);
                }
            });

            toTable.indexes.forEach(function (toIndex) {
                var fromIndex = fromTable.indexes.find(function (fromIndex) {
                    return (0, _lodash.isEqual)(fromIndex, toIndex);
                });

                if (!fromIndex) {
                    if (toIndex.type === 'primaryKey') {
                        var _query11 = 'ALTER TABLE ' + toTable.name + ' ADD CONSTRAINT ' + toIndex.name + ' PRIMARY KEY (' + toIndex.columns.join(', ') + ')';
                        from.simulateQuery(_query11);
                        queries.push(_query11);
                    } else if (toIndex.type === 'unique') {
                        var _query12 = 'ALTER TABLE ' + toTable.name + ' ADD CONSTRAINT ' + toIndex.name + ' UNIQUE (' + toIndex.columns.join(', ') + ')';
                        from.simulateQuery(_query12);
                        queries.push(_query12);
                    } else if (toIndex.type === 'foreignKey') {
                        var _query13 = 'ALTER TABLE ' + toTable.name + ' ADD CONSTRAINT ' + toIndex.name + ' FOREIGN KEY (' + toIndex.columns.join(', ') + ') REFERENCES ' + toIndex.tableName + (toIndex.referenceColumns.length > 0 ? ' (' + toIndex.referenceColumns.join(', ') + ')' : '');
                        from.simulateQuery(_query13);
                        queries.push(_query13);
                    } else if (toIndex.type === 'check') {
                        var _query14 = 'ALTER TABLE ' + toTable.name + ' ADD CONSTRAINT ' + toIndex.name + ' CHECK (' + toIndex.expression + ')';
                        from.simulateQuery(_query14);
                        queries.push(_query14);
                    } else {
                        // Unknown index type.
                    }
                }
            });
        }
    });

    getTables(from.tables).forEach(function (fromTable) {
        var toTable = to.tables[fromTable.name];

        if (!toTable) {
            var query = 'DROP TABLE ' + fromTable.name;
            from.simulateQuery(query);
            queries.push(query);
        }
    });

    getTypes(to.types).forEach(function (toType) {
        var fromType = from.types[toType.name];

        if (!fromType) {
            var query = 'CREATE TYPE ' + toType.name + ' AS ENUM (' + toType.labels.map(function (label) {
                return '\'' + label + '\'';
            }).join(', ') + ')';
            from.simulateQuery(query);
            queries.push(query);
        } else {
            var previousLabels = fromType.labels.reduce(function (labels, label, index) {
                labels[label] = index;
                return labels;
            }, {});

            toType.labels.forEach(function (label, index) {
                var exists = previousLabels[label] >= 0;

                if (!exists) {
                    if (index === 0) {
                        var _query15 = 'ALTER TYPE ' + toType.name + ' ADD VALUE \'' + label + '\' BEFORE \'' + fromType.labels[0] + '\'';
                        from.simulateQuery(_query15);
                        queries.push(_query15);
                    } else {
                        var _query16 = 'ALTER TYPE ' + toType.name + ' ADD VALUE \'' + label + '\' AFTER \'' + fromType.labels[index - 1] + '\'';
                        from.simulateQuery(_query16);
                        queries.push(_query16);
                    }
                }
            });
        }
    });

    getTypes(from.types).forEach(function (fromType) {
        var toType = to.types[fromType.name];

        if (!toType) {
            var query = 'DROP TYPE ' + fromType.name;
            from.simulateQuery(query);
            queries.push(query);
        }
    });

    return queries;
}